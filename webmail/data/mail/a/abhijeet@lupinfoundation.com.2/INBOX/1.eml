Return-Path: susanta@lupinfoundation.com
Received: from lupinfoundation.com ([127.0.0.1])
	by SUSANTA
	; Mon, 7 Jan 2013 18:25:02 +0530
MIME-Version: 1.0
X-Mailer: AfterLogic WebMail PHP
X-Originating-IP: 127.0.0.1
X-Priority: 3 (Normal)
Message-ID: <495dabf.7f0d6fb1ac131edc6729692f69a7e53c@localhost>
From: susanta@lupinfoundation.com
To: abhijeet@lupinfoundation.com
Subject: Testing mail
Date: Mon, 7 Jan 2013 12:54:59 +0000
Content-Type: multipart/mixed;
	boundary="--=_NextPart_07a5053abf2d997fcd4c031b9788dc05"

----=_NextPart_07a5053abf2d997fcd4c031b9788dc05
Content-Type: multipart/alternative;
	boundary="--=_NextPart_cf651278fd469bc100942cdc18f43c50"

----=_NextPart_cf651278fd469bc100942cdc18f43c50
Content-Type: text/plain;
	charset="utf-8"
Content-Transfer-Encoding: Quoted-Printable

This is a testing mail from susanta.

----=_NextPart_cf651278fd469bc100942cdc18f43c50
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: Quoted-Printable

<html><body><font face=3D"Tahoma" size=3D"2">This is a testing mail from=
 susanta.</font></body></html>

----=_NextPart_cf651278fd469bc100942cdc18f43c50--


----=_NextPart_07a5053abf2d997fcd4c031b9788dc05
Content-Type: text/plain;
	name="changelog.txt"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
	filename="changelog.txt"

WzYuNi4wXQ0KWypdIE11bHRpcGxlIG1pbm9yIGlzc3VlcyBmaXhlZC4NCg0KWzYuNS4xXQ0K
WypdIFdlYk1haWwgaXMgbm93IGNvbXBhdGlibGUgd2l0aCBQSFAgNS4yIChjYWxlbmRhciBh
bmQgbW9iaWxlIHN5bmMgd2lsbCBub3QgYmUgYXZhaWxhYmxlKS4NClsqXSBCZXR0ZXIgZXJy
b3IgaGFuZGxpbmcgd2hlbiBzZXJ2ZXIgb3IgY29ubmVjdGlvbiBlcnJvciBvY2N1cnMuDQpb
Kl0gQnVnIHdpdGggZGlzcGxheWluZyBmb3JtYXR0ZWQgZGF0ZXMgZml4ZWQuDQpbKl0gU3lz
dGVtIGZvbGRlcnMgbm93IGNvcnJlY3RseSBkZXRlY3RlZCBpbiBHbWFpbCBhY2NvdW50cy4N
ClsqXSBGb2xkZXIgbGlzdCBvZiBkZWxldGVkIGFjY291bnQgbm8gbG9uZ2VyIGRpc3BsYXll
ZC4NClsqXSBGaXhlZCB0aGUgYXBwcm9hY2ggZm9yIHRpbWV6b25lLXJlbGF0ZWQgY2FsY3Vs
YXRpb25zIHdoZW4gZGlzcGxheWluZyBkYXRlIGFuZCB0aW1lIGluZm9ybWF0aW9uLg0KWypd
IE11bHRpcGxlIG1pbm9yIGlzc3VlcyBmaXhlZC4NCg0KWzYuNS4wXQ0KWytdIENhcmREQVYg
Zm9yIEFkZHJlc3MgQm9vayAoZW5hYmxlcyBzeW5jaW5nIGNvbnRhY3RzIG9uIGlQaG9uZSwg
ZXRjKQ0KWypdIE5ldyBzY3JlZW4gb2YgTW9iaWxlIFNldHRpbmdzDQpbK10gSWNvbnMgZm9y
IC5pY3MsIC52Y2FyZCBhdHRhY2htZW50cw0KWytdIEV4cG9ydCB0byBpQ2FsDQpbK10gUGVy
LXVzZXIgbG9nZ2luZyBpbiBhIGZpbGUgKGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMsIHNlZSBs
YWJzLmxvZy5zcGVjaWZpZWQtYnktdXNlciBwYXJhbWV0ZXIgaW4gaHR0cDovL3d3dy5hZnRl
cmxvZ2ljLmNvbS93aWtpL0FkdmFuY2VkX2NvbmZpZ3VyYXRpb25fdmlhX2NvbmZpZy5waHBf
ZmlsZV8oV2ViTWFpbF9Qcm9fNl9QSFApICkNClsqXSBBdXRvLWNoZWNrbWFpbCBubyBsb25n
ZXIgaW50ZXJmZXJlcyB3aXRoIG90aGVyIG9wZXJhdGlvbnMNClsqXSBGYXN0ZXIgcHJlZmV0
Y2ggb2YgZS1tYWlscw0KWytdIFNlYXJjaCBpbiBlLW1haWxzIGluY2x1ZGVzINCh0KENCg0K
WytdIENhbmNlbCBzZWFyY2gNClsqXSBJTUFQIHF1b3RhIGluZGljYXRvciBpcyBtb3JlIGFj
Y3VyYXRlDQpbK10gUGVyaW9kaWMgY2FsZW5kYXIgcmVmcmVzaA0KWypdIE1vcmUgYWNjdXJh
dGUgY291bnRpbmcgb2YgdW5yZWFkIGUtbWFpbHMNClsqXSBNdWx0aXBsZSBtaW5vciBpc3N1
ZXMgZml4ZWQuDQoNCls2LjQuM10NClsqXSBNdWx0aXBsZSBtaW5vciBpc3N1ZXMgZml4ZWQu
DQoNCls2LjQuMl0NClsqXSBDYWxlbmRhciBiYWNrZW5kIGhhcyBiZWVuIG1vZGlmaWVkLCBu
b3cgV2ViTWFpbCB1c2VzIEFQSSBvZiBEQVYgc2VydmVyIHdoaWNoIGFsbG93cyBmb3IgaW1w
cm92aW5nIGNhbGVuZGFyIHBlcmZvcm1hbmNlLg0KWypdIE11bHRpcGxlIG1pbm9yIGlzc3Vl
cyBmaXhlZCBpbiBjYWxlbmRhciBjbGllbnQgb2YgV2ViTWFpbC4NCg0KWzYuNC4xXQ0KWypd
IFBIUDogU2F2aW5nIGNhbGVuZGFyIHNldHRpbmdzIGlzIGZpeGVkLg0KWypdIEpTOiBTYXZp
bmcgZGF0YSBpbiBhY2NvdW50IHNldHRpbmdzIHRhYnMgaXMgZml4ZWQuDQoNCls2LjQuMF0N
ClsrXSBQSFA6IENhbERBViBzdG9yYWdlIGlzIHVzZWQgZm9yIGNhbGVuZGFyLCBkYXRhYmFz
ZSBzdG9yYWdlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuDQpbK10gUEhQOiBTeW5jaW5nIGNh
bGVuZGFycyB3aXRoIG1vYmlsZSBkZXZpY2VzIHZpYSBDYWxEQVYgcHJvdG9jb2wuIEZ1bmFt
Ym9sIHN5bmMgaXMgZGlzY29udGludWVkLg0KWytdIFBIUDogUHJvZmlsaW5nIG9mIG1haWwg
YW5kIGNhbGVuZGFyIGFjY291bnRzIGZvciBpT1MgZGV2aWNlcw0KWypdIFBIUDogT3V0ZGF0
ZWQgY29kZSBwdXJnZWQuDQpbLV0gUEhQLCBKUzogU3BlbGxjaGVjayBhbmQgUERBIGludGVy
ZmFjZSB2ZXJzaW9uIHJlbW92ZWQuDQoNCls2LjMuMTBdDQpbKl0gVGltZSBmaXhlZCBpbiBM
YXN0IGxvZ2luIGluZm9ybWF0aW9uLg0KWypdIEZlYXR1cmUgb2YgYWRkaW5nIHN1YmFkbWlu
cyB3aXRob3V0IGRvbWFpbiAoSXNPd25lciA9IHRydWUpLiBXaGVuIHJlbW92aW5nIHN1Y2gg
c3ViYWRtaW4sIGFsbCBkb21haW5zIGFuZCB1c2VycyBhcmUgcmVtb3ZlZCBhcyB3ZWxsIChQ
T0EpLg0KWytdIEpTLCBQSFA6IEdsb2JhbCBhZGRyZXNzIGJvb2sgdGFiIGluIGNvbnRhY3Rz
IGxpc3QuDQpbKl0gSlM6IFJlcXVlc3QgZm9yIGZyZXF1ZW50bHkgdXNlZCBjb250YWN0cyB3
YXMgY2F1c2luZyBlbmRsZXNzIGxvb3AgaW4gR29vZ2xlIENocm9tZS4NClsrXSBQSFA6IFN0
b3JhZ2UgcXVvdGEgZm9yIE1haWxTdWl0ZS4NClsqXSBQSFA6IERpc2FibGluZyBhZGRyZXNz
IGJvb2sgc2NyZWVuIHdhcyBpZ25vcmVkIGZyb20gY2FsZW5kYXIgc2NyZWVuLg0KWypdIEpT
OiBGb3J3YXJkIGJ1dHRvbiBpcyBhZGRlZCBmb3IgbWVzc2FnZSBmcm9tIFNlbnQgSXRlbXMg
Zm9sZGVyIG9wZW5lZCBpbiBuZXcgd2luZG93Lg0KWytdIERCOiBUd28gZGF0YWJhc2UgaW5k
ZXhlcyBhcmUgYWRkZWQgKHVzZV9mcmVxdWVuY3ksIHZpZXdfZW1haWwpIHRvIHNwZWVkIHVw
IGhhbmRsaW5nIGNvbnRhY3RzLg0KWypdIENTUzogZml4ZWQgYSBjcmFzaCB3aGljaCBvY2N1
cmVkIHdoZW4gb3BlbmluZyBXZWJNYWlsIHJpZ2h0IGFmdGVyIE1TTiB3ZWJzaXRlLg0KDQpb
Ni4zLjldDQpbK10gQ1NTLCBKUzogSWNvbiBmb3IgUFBUIGFuZCBQUFRYIGZpbGVzIGFkZGVk
IGZvciBkaXNwbGF5aW5nIGluIGF0dGFjaG1lbnRzIGxpc3QuDQpbKl0gSlM6IENoZWNrIG1h
aWwgYnV0dG9uIGZyZWV6aW5nIGlzIGZpeGVkLg0KWypdIEpTOiBNYWlscyB3ZXJlIG5vdCBy
ZW1vdmVkIGZyb20gRHJhZnRzIGZvbGRlciB1cG9uIHNlbmRpbmcsIGZpeGVkLg0KWytdIEpT
LCBQSFA6IE9wdGlvbiBmb3IgZXhwb3J0aW5nIGNvbnRhY3RzIGlzIGFkZGVkLg0KWytdIEpT
LCBQSFA6IEluZm9ybWF0aW9uIG9uIGxhc3QgbG9naW4gZGF0ZS90aW1lIGRpc3BsYXllZCBh
dCBsb2dpbiBwYWdlLg0KWytdIEpTOiBPdXRkYXRlZCBicm93c2VyIGFsZXJ0IGlzc3VlZCBw
cmlvciB0byByZWRpcmVjdGluZyB0byBQREEgdmVyc2lvbiAoaW4gY2FzZSBpZiB4bWxIdHRw
UmVxdWVzdCBvYmplY3QgY2Fubm90IGJlIGNyZWF0ZWQpLg0KWytdIEpTOiBBdXRvY29tcGxl
dGlvbiBvbiBsb2dpbiBwYWdlLg0KWytdIEpTOiBGaXhlcyBmb3IgUGVyc2lhbiBhbmQgUm9t
YW5pYW4gdHJhbnNsYXRpb25zLg0KDQpbNi4zLjhdDQpbKl0gUEhQOiBGaXhlZCBkZXRlY3Rp
bmcgaW5saW5lIGF0dGFjaG1lbnRzIHZpYSBJTUFQIGJvZHkgc3RydWN0dXJlLg0KWypdIFBI
UDogRml4ZWQga2V5IHZhbGlkaXR5IGNoZWNrLg0KWypdIFBIUDogQWRkaXRpb25hbCBwcm9j
ZXNzaW5nIG9mIHNlcnZlciByZXNwb25zZSBpcyBwZXJmb3JtZWQgd2hlbiBzZWFyY2hpbmcg
Zm9yIE1lc3NhZ2UtSUQgYW5kIGxvY2F0aW5nIG1hdGNoaW5nIFVJRC4NClstXSBQSFA6ICJV
c2Ugc3BlY2lmaWVkIGxvZ2luIiBvcHRpb24gZm9yIFNNVFAgYXV0aGVudGljYXRpb24gaGFz
IGJlZW4gcmVtb3ZlZCBmcm9tIGRlZmF1bHQgZG9tYWluIHNldHRpbmdzIGFzIGl0cyBhY3R1
YWxseSBuZXZlciB1c2VkIHRoZXJlLg0KWypdIFBIUCwgSlM6IFN5c3RlbSBzZXR0aW5nIGFk
ZGVkIGZvciBkaXNhYmxpbmcgYXV0b3NhdmUgdG8gRHJhZnRzLg0KWypdIEpTOiBJZiBmaXJz
dCBhdXRvc2F2ZSBhdHRlbXB0IGlzIHVuc3VjY2Vzc2Z1bCwgYXV0b3NhdmUgaXMgY2FuY2Vs
bGVkLg0KWypdIEpTOiBJbiBjYXNlIGlmIGF1dG9zYXZlIGlzIGluIHByb2dyZXNzIHdoZW4g
c2VuZCBpcyBwZXJmb3JtZWQsIHNlbmRpbmcgaXMgZGVsYXllZCB0aWxsIGF1dG9zYXZlIGlz
IG92ZXIuDQoNCls2LjMuN10NClsqXSBQSFA6IE5vbi1zeXN0ZW0gZm9sZGVycyBhcmUgY29u
c2lkZXJlZCB3aGVuIHN5bmNpbmcgZm9sZGVycywgcHJvdmlkZWQgdGhleSdyZSBtYWRlIGRl
ZmF1bHQgb25lcyB2aWEgcGx1Z2luLg0KWytdIFBIUDogQ29uZmlndXJhdGlvbiBvcHRpb24g
YWRkZWQgZm9yIGNyZWF0aW5nIHJlcXVpcmVkIGZvbGRlcnMgb24gZWFjaCBsb2dpbi4NClsq
XSBQSFA6IE1ldGhvZCBhZGRlZCBmb3IgbW92aW5nIG1lc3NhZ2VzIGluIElNQVAgdXNpbmcg
QXBwZW5kLCBjYWxsYmFjayBhbGxvd3MgZm9yIG1vZGlmeWluZyBhIG1lc3NhZ2UuDQoNCls2
LjMuNl0NClsrXSBQSFAsIEpTOiBTcGVjaWFsIGZvbGRlciBhY2Nlc3MgbW9kZSBpcyBhZGRl
ZCBmb3IgSU1BUCwgd2hlbiB0aGF0IG1vZGUgaXMgZW5hYmxlZCBmb2xkZXIgc3Vic2NyaXB0
aW9uIGlzIGlnbm9yZWQgYW5kIGFsbCB0aGUgZm9sZGVycyBhcmUgYWx3YXlzIHRyZWF0ZWQg
YXMgc3Vic2NyaWJlZC4gVGhlIFN1YnNjcmliZWQgY29sdW1uIGluIE1hbmFnZSBGb2xkZXJz
IHNjcmVlbiBpcyBibG9ja2VkLg0KWypdIFBIUDogRml4ZWQgaXNzdWUgd2l0aCBzb3J0aW5n
IHN5c3RlbSBmb2xkZXJzIHdoaWNoIGNhdXNlZCB0aGVpciBkdXBsaWNhdGlvbiBpbiBzb21l
IGNhc2VzLg0KDQpbNi4zLjVdDQpbKl0gSlM6IEZpeGVkIHJlcGx5IGJ1dHRvbiBpbiBob3Jp
em9udGFsIGxheW91dCB2aWV3Lg0KDQpbNi4zLjRdDQpbKl0gUEhQOiBVcGRhdGVzIGluIFBP
UDMgbW9kdWxlIGluIG9yZGVyIHRvIGNvbXBseSB3aXRoIG5vZGIgbW9kZS4NClsqXSBKUzog
TG9naW4gSmF2YVNjcmlwdCBlcnJvciBmaXhlZC4NCg0KWzYuMy4zXQ0KWypdIEpTOiBQcmlu
dCBmdW5jdGlvbiBkaWRuJ3Qgd29yayBpbiB2aWV3IG1lc3NhZ2UgaW4gJ25ldyB3aW5kb3cn
IG1vZGUNClsqXSBKUzogQXV0b3NhdmUgaW4gY29tcG9zZSBzY3JlZW4gaW4gcG9wMyBhY2Nv
dW50cyBjbG9zZWQgY29tcG9zZSB3aW5kb3cuDQoNCls2LjMuMl0NClsqXSBKUzogRml4ZWQg
c3dpdGNoaW5nIGJldHdlZW4gaHRtbCBhbmQgcGxhaW4gbW9kZXMgaW4gY29tcG9zZSBzY3Jl
ZW4gd2hlbiBzaWduYXR1cmUgaXMgb24uDQoNCls2LjMuMV0NClsqXSBQSFA6IExpbmtzIGxp
a2Ugd3d3LmRvbWFpbi5jb20gd2VyZSBvcGVuZWQgaW5jb3JyZWN0bHkgaW4gd2ViIGJyb3dz
ZXIuDQpbKl0gSlM6IEZpeGVkIGZpbHRlcmluZyBsb29wIG9mIEFKQVggcmVxdWVzdHMgZm9y
IG5vbi1kZWZhdWx0IGFjY291bnRzLg0KWypdIEpTOiBSZXNpemVyIHBvc2l0aW9uIGJldHdl
ZW4gZm9sZGVycyBwYW5lIGFuZCBtZXNzYWdlIGxpc3Qgd2FzIG5vdCBzYXZlZCwgcmVzaXpp
bmcgY2F1c2VkIGNvbnRlbnQgc2VsZWN0aW9uLCBib3RoIHRoZSBpc3N1ZXMgYXJlIGZpeGVk
Lg0KDQpbNi4zLjBdDQpbK10gUEhQLCBKUzogU3VwcG9ydCBhbmQgbWFuYWdpbmcgb2YgZm9y
d2FyZHMsIGZpbHRlcnMgYW5kIHZhY2F0aW9uIG1lc3NhZ2VzIHZpYSBTaWV2ZS4NClsqXSBQ
SFA6IEltcHJvdmVkIHBsdWdpbiBzeXN0ZW0sIGFsbG93cyBmb3IgZWFzeSBhZGRpbmcgb2Yg
cGx1Z2lucyBmb3IgY2hhbmdpbmcgcGFzc3dvcmRzLCBmb3J3YXJkcywgYXV0b3Jlc3BvbmRl
cnMuDQpbKl0gUEhQLCBKUzogT3BlbmluZyBwdWJsaXNoZWQgY2FsZW5kYXIgaXMgZml4ZWQu
DQpbKl0gUEhQLCBKUzogU29ydGluZyBieSBkYXRlIGlzIGFsd2F5cyBhcHBsaWVkIGV2ZW4g
aWYgdGhlIHNlcnZlciBkb2Vzbid0IHN1cHBvcnQgc29ydGluZyBtYWlscy4NClsrXSBQSFAs
IEpTOiBXaGVuIGNvbXBvc2luZyBtZXNzYWdlcywgdGhleSBhcmUgYXV0b3NhdmVkIHRvIERy
YWZ0cyBwZXJpb2RpY2FsbHkuDQpbKl0gUEhQOiBBZGRpdGlvbmFsIHNldHRpbmcgd2hpY2gg
YWxsb3dzIGZvciBiZXR0ZXIgZGF0ZSBzb3J0aW5nLg0KWypdIFBIUDogRml4ZWQgaXNzdWUg
aW4gQ29tcG9zZSBzY3JlZW4gd2hpY2ggcmVzdWx0ZWQgaW4gZXJyb3Igb24gZW1haWwgYXV0
Y29tcGxldGlvbiB3aXRoIGFkZHJlc3MgYm9vayBkaXNhYmxlZC4NClsqXSBQSFA6IEZpeGVk
IGlzc3VlIHdpdGggYWRkaW5nIGF0dGFjaG1lbnRzIGNhdXNlZCBieSBqc29uX2VuY29kZSBm
dW5jdGlvbiBub3QgYXZhaWxhYmxlIGluIFBIUC4NClsqXSBQSFA6IEltcHJvdmVkIGh5cGVy
bGlua3MgaGlnaGxpZ2h0IGluIG1lc3NhZ2UuDQpbK10gSlM6IFJpZ2h0LW1vdXNlIGJ1dHRv
biBtZW51IGluIG1lc3NhZ2UgbGlzdCBhZGRlZC4NClsqXSBKUzogRml4ZWQgZXJyb3Igb24g
dXNpbmcgY29sb3IgcGFsZXR0ZSBpbiBJRTkuDQpbKl0gSlM6IEluIE1hbmFnZSBGb2xkZXJz
IHNjcmVlbiwgcmVhbCBmb2xkZXIgbmFtZXMgYXJlIGRpc3BsYXllZC4gSWYgYSBwYXJ0aWN1
bGFyIGZvbGRlciBpcyB1c2VkIGFzIGEgc3lzdGVtIG9uZSwgdGhhdCBpcyBpbmRpY2F0ZWQg
bmV4dCB0byBmb2xkZXIgbmFtZSAoZS5nLjogdXNlZCBhcyBTZW50IEl0ZW1zKS4NClsqXSBK
UzogRW1haWwgYXV0b2NvbXBsZXRpb24gaW4gQ29tcG9zZSBzY3JlZW4gZG9lcyBub3QgY292
ZXIgZW1haWxzIHdoaWNoIGFyZSBwcmVzZW50IGluIFRvL0NjL0JjYyBmaWVsZHMuDQpbKl0g
SlM6IFdoZW4gcmVwbHlpbmcgdG8gbWVzc2FnZSB3aGljaCBoYXMgZW1haWwgYWRkcmVzcyBp
biBSZXBseS1UbyBlcXVhbCB0byBvbmUgaW4gRnJvbSwgdGhlIGxhdHRlciBpcyB1c2VkIHNp
bmNlIGl0IG1pZ2h0IGhhdmUgZGlzcGxheSBuYW1lIHdlIG5lZWQgdG8gdXNlLg0KWypdIEpT
OiBXaGVuIGNsb3NpbmcgV2ViTWFpbCB3aW5kb3csIGFsbCB0aGUgd2luZG93cyBpbnZva2Vk
IGJ5IGl0IGFyZSBjbG9zZWQgYXMgd2VsbC4NClsqXSBKUzogRm9yIERyYWZ0cyBmb2xkZXIs
IHRvdGFsIG51bWJlciBvZiBtZXNzYWdlcyBpcyBkaXNwbGF5ZWQsIHdoaWxlIGZvciBvdGhl
ciBmb2xkZXJzIG51bWJlciBvZiB1bnJlYWQgbWFpbHMgaXMgZGlzcGxheWVkLg0KWypdIEpT
OiBNZXNzYWdlIGxpc3Qgd2FzIHNlbGVjdGVkIG9uIGRyYWcnbidkcm9wLCBmaXhlZC4NClsq
XSBKUzogV2hlbiBtZXNzYWdlIGlzIHNlbnQgZnJvbSBhIHNlcGFyYXRlIHdpbmRvdywgdGhh
dCB3aW5kb3cgaXMgY2xvc2VkLg0KWypdIEpTOiBXaGVuIGZvcndhcmRpbmcgbWVzc2FnZSBp
biBuZXcgd2luZG93cywgYXR0YWNobWVudHMgYXJlIG5vIGxvbmdlciBsb3N0Lg0KWypdIEpT
OiBFcnJvciB3aGljaCBvY2N1cmVkIHdoZW4gdXNpbmcgaW50ZWdyYXRpb24gdG8gZW50ZXIg
YW55IG90aGVyIHNjcmVlbiB0aGFuIG1lc3NhZ2UgbGlzdCwgICBpcyBub3cgZml4ZWQuDQpb
Kl0gUEhQLCBKUzogTWFueSBtaW5vciBpbXByb3ZlbWVudHMgYW5kIGZpeGVzLg0KDQo2LjIu
MA0KWypdIFBIUDogQWRtaW5QYW5lbCB3YXMgbm90IGRpc3BsYXlpbmcgbGlzdCBvZiBkb21h
aW5zIHdoZW4gaXQgZXhjZWVkZWQgY2VydGFpbiBudW1iZXIgb2YgcmVjb3Jkcy4NClsrXSBQ
SFA6IEVycm9yIG1lc3NhZ2UgYWRkZWQgZm9yIGxvZ2luIHNjcmVlbiwgaXQncyBzaG93biB3
aGVuIG1haWwgc2VydmVyIGlzIG5vdCBhY2Nlc3NpYmxlLg0KWytdIFBIUDogU2lldmUgcGx1
Z2luIGFkZGVkLg0KWypdIFBIUDogRml4ZWQgZXJyb3Igb2Ygc2F2aW5nIGNhbGVuZGFyIHNl
dHRpbmdzIHdoZW4gY2VydGFpbiB0aW1lIGZvcm1hdCB1c2VkLg0KWypdIEpTOiBDb2xvciBw
YWxldHRlIGNvdWxkbid0IGJlIG9wZW5lZCBpbiBTaWduYXR1cmUgZWRpdG9yLg0KWypdIEpT
OiBOZXcgTWVzc2FnZSBzY3JlZW4gd2FzIG5vdCB1c2luZyBVc2UgU2lnbmF0dXJlIHNldHRp
bmcuDQpbKl0gSlM6IFdoZW4gcmVwbHlpbmcgdG8gbWVzc2FnZSwgc2lnbmF0dXJlIHdhcyBh
ZGRlZCBhZnRlciBxdW90aW5nLCBub3cgaXQncyBiZWZvcmUgcXVvdGluZy4NClsqXSBKUzog
T24gYWRkaW5nIGZpbHRlciwgIm5vIGZpbHRlcnMgc3BlY2lmaWVkIHlldCIgdGV4dCB3YXMg
c3RpbGwgZGlzcGxheWVkLg0KWy1dIEpTOiBPdXRkYXRlZCBjb2RlIGZvciBpbXBsZW1lbnRp
bmcgZGVtbyBhY2NvdW50IGlzIHJlbW92ZWQuDQoNCjYuMS44DQpbK10gUEhQLCAuTkVULCBK
UzogSWRlbnRpdGllcyBzdXBwb3J0DQpbKl0gSlM6IFNpZ25pZmljYW50bHkgc2ltcGxpZmll
ZCBjaGVjayBtYWlsLCBub3cgaXQgZ29lcyBtdWNoIGZhc3Rlcg0KWypdIFBIUDogUGx1Z2lu
IHN5c3RlbSBmdW5jdGlvbmFsaXR5IGV4dGVuc2lvbg0KWypdIFBIUDogTG90cyBvZiBzbWFs
bCBpbnRlcm5hbCBjaGFuZ2VzLg0KDQo2LjEuNw0KWypdIFBIUDogIk5ldyB1c2VyIiBidXR0
b24gYWRkZWQgaW4gQWRtaW5QYW5lbC4NClsqXSBQSFA6IGFkZGVkIGhvb2sgYW5kIHVzYWdl
IGV4YW1wbGUgZm9yIEdsb2JhbCBTaWduYXR1cmUgcGx1Z2luLg0KDQo2LjEuNg0KWypdIFBI
UDogT2NjYXNpb25hbGx5LCBpbmxpbmUgaW1hZ2VzIHdlcmUgbm90IGFkZGVkIGZvciBmaWxl
bmFtZS1zcGVjaWZpYyByZWFzb25zLg0KWypdIFBIUDogVmVyYm9zZSBlcnJvciBtZXNzYWdl
cyBmb3IgUE9QUEFTU0QgcGx1Z2luLg0KWypdIC5ORVQ6IExheW91dCBpc3N1ZXMgZml4ZWQg
Zm9yIG5ldyB3aW5kb3cgb3BlbmVkIHdpdGggZG91YmxlIGNsaWNrLg0KDQo2LjEuNQ0KWypd
IEpTOiBJdCdzIHBvc3NpYmxlIHRvIHNob3cgbmV3IHBhc3N3b3JkIGZpZWxkIHdoZW4gdXNl
cnMgYXJlbid0IGFsbG93ZWQgdG8gY2hhbmdlIHNldHRpbmdzLg0KWypdIEpTOiBDaGFuZ2lu
ZyBwYXNzd29yZCBpc3N1ZSBjb3JyZWN0ZWQuDQpbK10gLk5FVCwgUEhQOiBBZGRpdGlvbmFs
IHNldHRpbmcgd2hpY2ggY2FuIGZvcmJpZCBhZGRpbmcgbmV3IGFjY291bnRzIG9uIGxvZ2lu
Lg0KWypdIFBIUDogRGF0ZSBmb3JtYXR0aW5nIGZpeGVkIGZvciBleHBvcnRpbmcgdG8gaUNh
bC4NClsqXSAuTkVUOiBTb3J0aW5nIGluIElNQVAgY29ycmVjdGVkLg0KDQo2LjEuMw0KWytd
IFBIUDogTmV3IHBsdWdpbiBhdmFpbGFibGUgZm9yIGNoYW5naW5nIHVzZXIgcGFzc3dvcmQg
dmlhIHBvcHBhc3NkLg0KWypdIFBIUDogV2hlbiBvcGVuaW5nIGEgbWVzc2FnZSBpbiBzZXBh
cmF0ZSB3aW5kb3cgYW5kIGRvaW5nIEZvcndhcmQsIG1lc3NhZ2UgYm9keSB3YXMgZW1wdHku
DQpbKl0gSlM6IEN1cnJlbnQgZm9sZGVyIGlzIGV4Y2x1ZGVkIGZyb20gZm9sZGVycyBsaXN0
IGluICJNb3ZlIHRvIGZvbGRlciIgZHJvcGRvd24uDQpbKl0gSlM6IElmIGRlbGV0aW5nIG1l
c3NhZ2VzIG9yIGRvaW5nIGNoZWNrbWFpbCByaWdodCBiZWZvcmUgdmlld2luZyBtZXNzYWdl
LCB0aGF0IG1lc3NhZ2UgY291bGQgYmVjb21lIHVucmVhZCBhZ2FpbiwgYW5kIGRlbGV0ZWQg
bWVzc2FnZXMgY291bGQgYmVjb21lIHZpc2libGUgYWdhaW4gZm9yIGEgd2hpbGUuDQpbKl0g
SlM6IFNvcnRpbmcgYnkgYXR0YWNobWVudHMgYW5kIGZsYWdzIGlzIHJlbW92ZWQgZm9yIElN
QVAgc2luY2UgdGhpcyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHNlcnZlcnMuDQpbKl0gSlM6IHdp
bmRvdy5vcGVuZXIgcmVsYXRlZCBjaGVja3Mgd2VyZSByZW1vdmVkLCB0aGV5IHdlcmUgY2F1
c2luZyBnbGl0Y2hlcyBpbiBDb21wb3NlIGFuZCBRdWljayBSZXBseSBtb2Rlcy4NClsqXSBK
UzogUXVpY2sgUmVwbHkgd2Fzbid0IHdvcmtpbmcgaW4gbmV3IHdpbmRvdyBkdWUgdG8gYW5p
bWF0aW9uLg0KWypdIEpTOiBJc3N1ZXMgd2l0aCBkaXNwbGF5aW5nIGF0dGFjaG1lbnRzIGlu
IElFNiw3Lg0KWypdIEpTOiBUaGUgIkF1dG9jaGVjayBtYWlsIGV2ZXJ5IiBzZXR0aW5nIHdh
cyBub3QgYXBwbGllZCB1bmxlc3MgdGhlIHdpbmRvdyBpcyByZWZyZXNoZWQNClsqXSBKUzog
QWZ0ZXIgQ2hlY2sgbWFpbCwgbWFpbCBkZWxldGVkIGJ5IG90aGVyIGNsaWVudCB3YXMgc3Rp
bGwgdGhlcmUNClsqXSBKUzogSW4gQ29tcG9zZSBtb2RlLCB3aGVuIGNob29zaW5nIGNvbnRh
Y3RzIGJ5IGNsaWNraW5nIFRvLCBDQywgQkNDLCBhcmVhIGZvciBhZGRpbmcgYXR0YWNobWVu
dHMgd2FzIHZpc2libGUgdW5kZXJuZWF0aCB0aGUgY29udGFjdHMgbGlzdC4NClsqXSBKUzog
SFRNTCBlZGl0b3Igd2FzIHJlbmRlcmVkIGluY29ycmVjdGx5IGluIElFNiw3Lg0KDQo2LjEu
Mg0KWytdIFBIUDogRmlubmlzaCB0cmFuc2xhdGlvbiBhZGRlZC4NClsqXSBQSFA6IEJ1Z2Zp
eCByZWxhdGVkIHRvIFBPUDMgYWNjb3VudHMgKGVycm9ycyB3aGVuIGNyZWF0aW5nIGZvbGRl
cnMpLg0KWytdIFBIUCwgSlM6IENvcnJlY3Rpb25zIGZvciAiRm9yd2FyZGVkIiBmbGFnIGRl
dGVjdGlvbi4NClsqXSBKUzogRGVjZWN0aW9uIGZvciBudW1iZXIgb2YgcHJldmlvdXMgbWVz
c2FnZXMgd2hlbiByZXBseWluZy9mb3J3YXJkaW5nIChSZVt4XSwgRndkW3hdKS4NCg0KNi4x
LjENClsrXSBQSFA6IGFtcjJ3YXZfY29udmVydC5zaCBzY3JpcHQgZm9yIGNvbnZlcnQgLmFt
ciBmaWxlcyB0byAud2F2IGFkZGVkIHRvIC9kYXRhL2NvbnZlcnQvIGRpcmVjdG9yeQ0KWypd
IEpTOiBGaXhlZCBpc3N1ZSBvZiBtZXNzYWdlIGxpc3Qgc29ydGluZyBpbiBJTUFQIG1vZGUN
Cg0KNi4xLjANClsrXSBQSFA6IFZvaWNlIE1lc3NhZ2Ugc3VwcG9ydCAoLkFNUiBwbGF5YmFj
aykNClsqXSBQSFA6IEZ1bmN0aW9ucyBuYW1lcyBoYXZlIGJlZW4gcmVmYWN0b3JlZC4NClsq
XSBKUzogTmV3IGxvb2sgZm9yIGF0dGFjaG1lbnRzIHBhbmUuDQpbKl0gSlM6IFdhcyBub3Qg
cG9zc2libGUgdG8gdXNlIFF1aWNrIFJlcGx5IGZvciBzZW5kaW5nIG1haWwgdG8geW91cnNl
bGYuIEZpeGVkLg0KWypdIFBIUDogSW5jb3JyZWN0IGNoZWNrIGZvciBleHRlcm5hbCBpbWFn
ZXMgYWRkZWQuDQpbK10gSlM6IFF1aWNrIFJlcGx5IHBhbmUgaXMgYW5pbWF0ZWQgd2hlbiBz
ZW5kaW5nIG1lc3NhZ2UuDQpbKl0gUEhQOiBBY2NvdW50cyBhcmUgbm93IGVtYWlsLWJhc2Vk
LiBGb3IgYWNjb3VudHMgYWRkZWQgaW4gQWR2YW5jZWQgTG9naW4gbW9kZSwgc3Vic2VxdWVu
dCBsb2dpbnMgZG9uJ3QgcmVxdWlyZSB0aGlzIG1vZGUuDQoNCjYuMC4zDQpbKl0gUEhQOiBQ
bGVzayBpbnRlZ3JhdGlvbiBpcyBvcGVyYXRpb25hbCBub3cuDQpbKl0gUEhQOiBNYWlsYWRt
IGFuZCBzdWJhZG1pbnMgcGFzc3dvcmRzIGFyZSBoYXNoZWQuDQpbKl0gUEhQOiBCdWdmaXg6
IGluY29taW5nIG1haWwgcG9ydCB3YXMgdXNlZCBmb3IgU01UUCBpbiBBZHZhbmNlZCBMb2dp
biBtb2RlLg0KDQo2LjAuMg0KWypdIEpTOiBDb3JyZWN0aW9ucyBmb3IgYmxpbmtpbmcgZmF2
aWNvbiB1c2VkIGFzIG5vdGlmaWNhdGlvbiBmb3IgbmV3IG1lc3NhZ2VzLg0KWypdIEpTOiBD
b3JyZWN0aW9ucyByZWxhdGVkIHRvIHByZWNhY2hpbmcgZnVuY3Rpb25hbGl0eS4NClsrXSBQ
SFAsIC5ORVQsIEpTOiBGb3J3YXJkZWQgZmxhZyBpcyBiYWNrLg0KWypdIFBIUDogQ29ycmVj
dGlvbnMgZm9yIGRhdGVzIGluIGNhbGVuZGFyLg0KWypdIFBIUDogRml4ZWQgaXNzdWUgb2Yg
Y3JlYXRpbmcgYW5kIGRpc3BsYXlpbmcgZm9sZGVycyB3aXRoIGludGVybmF0aW9uYWwgbmFt
ZXMuDQpbKl0gSlM6IEN1cnNvciBhdXRvZm9jdXMgaXMgY29ycmVjdGVkIG9uIGxvZ2luIGZv
cm0uDQpbKl0gUEhQOiBEZWZhdWx0IGRvbWFpbiB3YXMgbm90IHNhdmluZyBHbG9iYWwgQWRk
cmVzcyBib29rIHNldHRpbmcsIGZpeGVkLg0KWypdOiAuTkVUOiBGaWxlIHVwbG9hZGVyIGZp
eGVkLg0KWypdIEpTOiBXaGVuIFNlbnQgSXRlbXMgZm9sZGVyIGlzIHNlbGVjdGVkLCBGb3J3
YXJkIGJ1dHRvbiBiZWNhbWUgYXZhaWxhYmxlLg0KWypdIFBIUDogQ29ycmVjdCBwcm9jZXNz
aW5nIG9mIE92ZXJyaWRlU2V0dGluZ3MgaW4gZG9tYWluIG9wdGlvbnMuDQpbKl0gUEhQOiBG
aXhlZCBpc3N1ZSBvZiBzb3J0aW5nIGZvbGRlcnMgaW4gTWFuYWdlIEZvbGRlcnMgc2NyZWVu
IChJZFBhcmVudCB3YXMgbm90IHNldCBjb3JyZWN0bHkgZm9yIGZvbGRlcnMgd2hlbiBhZGRp
bmcgdG8gZGF0YWJhc2UpDQpbKl0gUEhQOiBGaXhlZCBpc3N1ZSBvZiBzZWFyY2ggaW4gYWxs
IG1haWwgZm9sZGVycyBpbiBQT1AzDQpbK10gUEhQLCAuTkVULCBKUzogQWRkZWQgWExJU1Qg
c3VwcG9ydCAoZ21haWwuY29tKQ0KWytdIFBIUCwgLk5FVDogRml4ZWQgaXNzdWUgb2YgYXNz
aWduaW5nIHN5c3RlbSBmb2xkZXJzIChwcmV2aW91c2x5LCBpdCB3YXNuJ3QgcG9zc2libGUg
dG8gc2V0IHN5c3RlbSBhc3NpZ25tZW50IGZvciBhIHN1YmZvbGRlcikuDQpbK10gUEhQLCAu
TkVULCBKUzogSXQgaXMgbm93IHBvc3NpYmxlIHRvIGNvbmZpZ3VyZSBBZHZhbmNlZExvZ2lu
IHZpYSBzZXR0aW5ncy54bWwgZmlsZS4NClsqXSAuTkVUOiBTZXZlcmFsIGZpeGVzIGZvciBo
TWFpbFNlcnZlciBpbnRlZ3JhdGlvbi4NClsqXSAuTkVUOiBGaXhlZCBlcnJvciBvZiBzZWFy
Y2hpbmcgZm9yIHVzZXJzIGluIEFkbWluUGFuZWwuDQoNCjYuMC4xDQpbKl0gSlMsIFBIUCwg
Lk5FVDogZml4IGZvciBhZGRpbmcgYXR0YWNobWVudHMgKGZpbGUgc2l6ZSBsaW1pdCB3YXMg
aWdub3JlZCkuDQpbKl0gSlM6IEZpeCBmb3IgY2hhbmdpbmcgc2tpbiBpbiB1c2VyIGFjY291
bnQgc2V0dGluZ3MgKHRoZSBwcm9wZXIgc2tpbiBkaWRuJ3QgYWx3YXlzIGFwcGx5KS4NClsq
XSBKUzogVGhlIHByb2JsZW0gb2YgbWlzc2luZyBtZXNzYWdlIGxpc3QgcGFnZXMgc3dpdGNo
ZXIgaXMgZml4ZWQuDQpbKl0gUEhQLCAuTkVUOiBBdXRvY29tcGxldGlvbiBvZiBlbWFpbCBh
ZGRyZXNzZXMgaXMgY29ycmVjdGVkLiBFbWFpbCBhZGRyZXNzZXMgYWRkZWQgdG8gYXV0b2Nv
bXBsZXRpb24gbGlzdCB3aGVuIHNlbmRpbmcgbWFpbCBhcmUgbm8gbG9uZ2VyIGRpc3BsYXll
ZCBpbiBDb250YWN0cyBzY3JlZW4uDQpbKl0gUEhQOiBYTUwgZGF0YSBwYWNrZXRzIGVuY29k
aW5nIGlzIGZpeGVkLCBoZWFkZXJzIGFuZCBhdHRhY2htZW50IG5hbWVzIGFyZSBkaXNwbGF5
ZWQgY29ycmVjdGx5Lg0KWypdIC5ORVQ6IEZpeCBmb3IgZmV0Y2hpbmcgbWFpbHMgaW4gQWxs
L05lZSBNZXNzYWdlcyBhbmQgQWxsL05ldyBIZWFkZXJzIHN5bmMgbW9kZXMgZm9yIElNQVAg
YWNjb3VudHMuDQpbKl0gSlM6IEJ1Z2ZpeCBmb3Igc2VhcmNoIGluIG1lc3NhZ2VzIGFuZCBj
b250YWN0cyByZWZ1c2luZyB0byB3b3JrIGFmdGVyIHNlYXJjaGluZyBmb3IgZW1wdHkgdmFs
dWUuDQpbKl0gSlM6IEZpeCBmb3Igc3dpdGNoaW5nIGxhbmd1YWdlIGluIHVzZXIgc2V0dGlu
Z3MgKG5vdCBhbGwgbGFuZ3VhZ2UgY29uc3RhbnRzJyB2YWx1ZXMgd2VyZSB1cGRhdGVkIGlt
bWVkaWF0ZWx5KS4NClsrXSBQSFA6IEV4YW1wbGVzIG9mIHVzaW5nIG5ldyBBUEkgYXJlIGFk
ZGVkIHRvIGV4YW1wbGVzIGRpcmVjdG9yeS4NClsrXSBKUzogSW4gSW1wb3J0IENvbnRhY3Rz
IG1vZGUsIGxpbmsgdG8gcmVsZXZhbnQgZG9jdW1lbnRhdGlvbiBwYWdlIGlzIGF2YWlsYWJs
ZS4NCg0KNi4wLjANClsqXSBQSFAsIC5ORVQ6IEFkbWluUGFuZWwgaXMgcmV3cml0dGVuIGZy
b20gc2NyYXRjaDsNClsqXSBQSFAsIC5ORVQ6IHRvdGFsbHkgbmV3IHNjcmVlbiBvZiB1c2Vy
IGFjY291bnQgc2V0dGluZ3M7DQpbK10gUEhQLCAuTkVUOiBtb2Rlcm4gQUpBWC1iYXNlZCBm
aWxlIHVwbG9hZGVyIGluc3RlYWQgb2YgRmxhc2gtYmFzZWQgb25lOw0KWytdIFBIUDogc2Vw
YXJhdGUgTXlTUUwgbWFzdGVyL3NsYXZlIChyZWFkL3dyaXRlKSBNeVNRTDsNClsrXSBQSFAs
IC5ORVQ6IHJlYWRpbmcvY29tcG9zaW5nIG1haWwgaW4gbmV3IHRhYi93aW5kb3cgYnkgcHJl
c3NpbmcgU2hpZnQ7DQpbK10gUEhQLCAuTkVUOiBQcmludCBhbmQgU2F2ZSB0b29scyBpbiBw
cmV2aWV3IHBhbmU7DQpbK10gUEhQLCAuTkVUOiB3aW5kb3cvdGFiICJOZXcgTWVzc2FnZXMi
IGljb24gd2l0aCBudW1iZXIgb2YgbmV3IG1lc3NhZ2VzIGRpc3BsYXllZDsNClsrXSBQSFAs
IC5ORVQ6IGluc3RlYWQgb2YgZnVsbCByZWxvYWQsIG1lc3NhZ2UgbGlzdCBpcyBkeW5hbWlj
YWxseSB1cGRhdGVkIGFmdGVyIGRlbGV0aW5nL21vdmluZyBtYWlsczsNClsrXSBQSFAsIC5O
RVQ6IHF1b3RhIGluZGljYXRvciBpcyBiYWNrIGluIDMtcGFuZSB2aWV3Lg0KWy1dIFBIUCwg
Lk5FVDogQWR2YW5jZWQgTG9naW4gbW9kZSBkZXByZWNhdGVkLCAib3V0IG9mIGRvbWFpbiIg
dXNlciBjYW5ub3QgYmUgY3JlYXRlZDsNClstXSBQSFAsIC5ORVQ6IGNvbXBsaWF0ZWQgc3lu
Y2hyb25pemF0aW9uIG1vZGVzIG9wdGlvbnMgcmVtb3ZlZCAoSU1BUDogRGlyZWN0IE1vZGUg
b25seTsgUE9QMzogRW50aXJlIE1lc3NhZ2VzIG9ubHkpOw0KWy1dIFBIUCwgLk5FVDogU2Vs
ZWN0aW5nIGRlZmF1bHQgY2hhcnNldCBubyBsb25nZXIgYXZhaWxhYmxlLCBvbmx5IFVURi04
IGlzIHVzZWQ7DQpbLV0gLk5FVDogTVMgQWNjZXNzIHN1cHBvcnQgZm9yIEFTUC5ORVQgZWRp
dGlvbiBkaXNjb250aW51ZWQ7DQpbLV0gUEhQOiBNUyBTUUwgc3VwcG9ydCBmb3IgUEhQIGVk
aXRpb24gZGlzY29udGludWVkLg0KDQo1LjEuMTENClsqXSBQSFA6IFRoZSBpc3N1ZSB3aXRo
IGVtcHR5IG1lc3NhZ2VzIGxpc3QgaW4gUE9QMyBJbmJveCAoRGlyZWN0IE1vZGUpIGhhcyBi
ZWVuIGZpeGVkDQpbKl0gSlM6IFNwYW0gYnV0dG9uIGlzIG5vdyBhdmFpbGFibGUgaW4gSU1B
UCBhY2NvdW50IGlmIFNwYW0gc3lzdGVtIGZvbGRlciBleGlzdHMNClsqXSBKUzogU2VhcmNo
IGJhciB3YXMgZGlzYXBwZWFyaW5nIHdoZW4gbmF2aWdhdGluZyBiYWNrIHRvIG1lc3NhZ2Vz
IGxpc3QNCg0KNS4xLjEwDQpbKl0gUEhQOiBVbmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMs
IGZ1bGwgbGlzdCBvZiBjb250YWN0cyB3YXMgbm90IGF2YWlsYWJsZS4NClsrXSBQSFA6IFNh
dmUgaW4gU2VudCBzZXR0aW5nIGlzIHN0b3JlZCBwZXItYWNjb3VudCBpbiBjb29raWVzLg0K
DQo1LjEuOQ0KWypdIFBIUDogNS4xLjggbWlub3IgYnVnIGZpeGVzLg0KDQo1LjEuOA0KWypd
IFBIUDogRG91YmxlIGRhdGFiYXNlIGNvbm5lY3Rpb24gaXMgcGVyZm9ybWVkIChyZWFkL3dy
aXRlKQ0KWypdIFBIUDogQWxwaGFiZXRpY2FsIGluZGV4IGluIGNvbnRhY3RzIChkaXNhYmxl
ZCBieSBkZWZhdWx0KQ0KWypdIFBIUDogTWlub3IgZml4ZXMsIGNvZGUgcmVmYWN0b3JpbmcN
ClsqXSBQSFA6IFJlcXVpcmVkIGluZGV4ZXMgYXJlIGFkZGVkIHRvIHRoZSBkYXRhYmFzZQ0K
DQo1LjEuNw0KWypdIFBIUDogUmVuYW1pbmcgZm9sZGVycyBub3cgcHJvY2Vzc2VzIHJlLXN1
YnNjcmlwdGlvbiBjb3JyZWN0bHkuDQpbKl0gUEhQOiBGb3JjZWQgc2VjdXJpdHkgY2hlY2sg
b2YgaW5jb21pbmcgcGFyYW1ldGVycy4NClsqXSBQSFA6IE1lc3NhZ2Ugc2l6ZSBkZXRlY3Rp
b24gYmVmb3JlIHNlbmRpbmcgb3Igc2F2aW5nIGhhcyBiZWVuIGZpeGVkLg0KWypdIFBIUDog
Q2FsZW5kYXIgcXVlcmllcyBhcmUgbm93IHN1YmplY3QgdG8gYWRkaXRpb25hbCBjaGVja3Mu
DQpbKl0gUEhQOiBJbmxpbmUgYXR0YWNobWVudHMgZGV0ZWN0aW9uIGltcHJvdmVkLg0KDQo1
LjEuNg0KWypdIFBIUDogTWFuZGF0b3J5IHBhc3N3b3JkIGNoZWNrIG9uIElNQVAgc2VydmVy
IHdoaWxlIGxvZ2dpbmcgaW4uDQpbKl0gUEhQOiBIVE1MIHBhcnQgaXMgbm8gbG9uZ2VyIGNy
ZWF0ZWQgd2hlbiBwbGFpbnRleHQgbWVzc2FnZSBpcyBzZW50Lg0KWypdIFBIUDogTWVzc2Fn
ZSBsaXN0IHNvcnRpbmcgYWZ0ZXIgc2VhcmNoIGluIERpcmVjdCBNb2RlIGZpeGVkLg0KWypd
IFBIUDogU2VydmVyIGNhcGFiaWxpdHkgY2hlY2sgaXMgbWFkZSB3aGVuIHJlcXVpcmVkLCBu
b3QgcmlnaHQgYWZ0ZXIgY29ubmVjdC4NClsqXSBQSFA6IE15U1FMIHF1ZXJ5IGZvciBjb250
YWN0IGxpc3Qgc2VhcmNoIGZpeGVkLg0KWypdIENhbGVuZGFyIEpzOiBCdWcgd2l0aCBpbmNv
cnJlY3QgYXBwb2ludG1lbnQgdGltZSBmb3IgZXh0ZXJuYWwgdXNlciBpbnZpdGF0aW9uIGZp
eGVkLg0KWypdIFBIUDogTWlub3IgcmVmYWN0b3JpbmcuDQoNCjUuMS41DQpbKl0gUEhQOiBT
YXZlIEluIFNlbnQgSXRlbXMgZnVuY3Rpb25hbGl0eSBjb3JyZWN0ZWQuDQpbKl0gUEhQOiBN
ZXNzYWdlIGRhdGUgZGV0ZWN0aW9uIGZpeGVkLg0KDQo1LjEuNA0KWypdIFBIUCwgLk5FVDog
QWRkZWQgbmV3IHByZWRlZmluZWQgc2V0dGluZyBpbiBBZG1pblBhbmVsOiBTYXZlIEluIFNl
bnQgSXRlbXMuDQpbKl0gUEhQOiBBdXRvcmVzcG9uY2Ugc2F2ZSBmaXhlZC4NCg0KNS4xLjEN
ClsqXSBQSFA6IEZpeGVkIHRoZSBwcm9ibGVtIHdpdGggbGluZXMgdGVybWluYXRlZCBieSBM
RiBhbmQgbm90IENSTEYgb24gc2VuZGluZyBtZXNzYWdlLg0KWypdIFBIUDogRml4ZWQgbWFp
bGNoZWNrIGlzc3VlcyB3aXRoIGZpbHRlcnMuDQoNCjUuMS4wDQpbKl0gLk5FVDogQnVnZml4
OiBNZXNzYWdlIHdlcmUgbWFya2VkIGFzIHJlYWQgb24gbWFpbGNoZWNrIGluIGRpcmVjdCBt
b2RlLg0KWypdIC5ORVQ6IEJ1Z2ZpeDogV2ViTWFpbCBQcm8gY3Jhc2hlZCBhZnRlciBkZWxl
dGluZyBtZXNzYWdlLg0KWypdIFBIUCwgLk5FVDogIlNob3cgcGljdHVyZXMgaW4gbWVzc2Fn
ZXMiIGFwcGxpZXMgdG8gZXh0ZXJuYWwgaW1hZ2VzIG9ubHkuDQpbKl0gUEhQLCAuTkVUOiBE
ZWZhdWx0IGRhdGUgc2V0dGluZyBpbiBjYWxlbmRhciB3b3JrIGNvcnJlY3RseS4NClsqXSBQ
SFAsIC5ORVQ6IEJ1Z2ZpeDogQWRkcmVzcyBhdXRvY29tcGxldGlvbiBkaWRuJ3Qgd29yayBz
dGFydGluZyBmcm9tIHRoZSAzcmQgcmVjaXBpZW50Lg0KWypdIFBIUCwgLk5FVDogIlJlcGx5
IHRvIGFsbCIgbm93IGNvdmVycyBzZW5kZXIgKCJGcm9tOiIpIG9mIHRoZSBvcmlnaW5hbCBt
YWlsLg0KWypdIFBIUCwgLk5FVDogImJhY2tncm91bmQiIGF0dHJpYnV0ZSB3YXMgbm90IHBy
b3Blcmx5IHByb2Nlc3NlZCB3aGVuIGhpZGluZyBpbWFnZXMuDQpbKl0gUEhQLCAuTkVUOiBP
biBhZGRpbmcgY29udGFjdCwgTmFtZSBmaWVsZCBnYWlucyBmb2N1cyBhdXRvbWF0aWNhbGx5
Lg0KWypdIFBIUCwgLk5FVDogRm9yIG1haWxzIHdpdGggZW1wdHkgc3ViamVjdCwgIk5vIHN1
YmplY3QiIGlzIGRpc3BsYXllZC4NClsqXSBQSFAsIC5ORVQ6IEVtYmVkZGVkIGRvY3VtZW50
YXRpb24gaXMgcmVwbGFjZWQgYnkgd2lraS1iYXNlZCBvbmUuDQpbKl0gUEhQLCAuTkVUOiBF
cnJvciBtZXNzYWdlcywgc3RhdHVzIHJlcG9ydHMgYW5kIG1haWxjaGVjayBub3RpZmljYXRp
b24gbm8gbG9uZ2VyIG92ZXJsYXAuDQpbKl0gUEhQLCAuTkVUOiBNZXNzYWdlIGxpc3QgaXMg
Y2xlYXJlZCBkdXJpbmcgc2VhcmNoLg0KWypdIFBIUCwgLk5FVDogRGlyZWN0IG1vZGUgaXMg
ZGVmYXVsdCBmb3IgSU1BUCBub3cuDQpbKl0gUEhQLCAuTkVUOiBGZXcgYnVnZml4ZXMgaW4g
Y2FsZW5kYXIuDQpbKl0gLk5FVDogQWRtaW5QYW5lbCBjb3JlIHJld3JpdHRlbiwgcGVyZm9y
bWFuY2UgaXMgbm93IGluY3JlYXNlZC4NClsqXSAuTkVUOiBGb2xkZXJzIGFuZCBmaWxlcyBz
dHJ1Y3R1cmUgbW9kaWZpZWQuDQpbK10gUEhQLCAuTkVUOiBPcHRpb24gZm9yIHNhdmluZyBt
ZXNzYWdlIHRvIFNlbnQgSXRlbXMgYWRkZWQuDQoNCjUuMC42DQpbKl0gUEhQOiBTYXZpbmcg
dG8gRHJhZnRzIGNvcnJlY3RlZC4NClsqXSBQSFA6IE1haWwgY29tcG9zaW5nIHJld3JpdHRl
biBpbiBvcmRlciB0byBlbnN1cmUgbG93ZXIgc3BhbSBzY29yZXMuDQpbKl0gQ2FsZW5kYXI6
IFBsYWNpbmcgd3JvbmcgaGFzaGVzIHRvIGV2ZW50IGludml0YXRpb24gbWFpbHMgY29ycmVj
dGVkLg0KDQo1LjAuNQ0KWypdIC5ORVQ6IEZpeGVkIGJ1ZyB3aXRoIFBPUDMgbWFpbCBtb2Rl
IGFuZCBhdXRvY2hlY2sgaW50ZXJ2YWwuDQoNCjUuMC40DQpbKl0gLk5FVDogU2V2ZXJhbCBs
YW5ndWFnZSBmaWxlcyB1cGRhdGVkLg0KWypdIC5ORVQ6IEZpeGVkIGJ1ZyB3aXRoIGZvcndh
cmRpbmcgbWVzc2FnZXMgd2l0aCBhdHRhY2htZW50cy4NCg0KNS4wLjMNClsqXSAuTkVUOiBG
aXhlZCBjb25mbGljdCB3aXRoIG5hbWVzcGFjZXMuDQpbKl0gUEhQOiBEZXRhaWxlZCBlcnJv
ciBtZXNzYWdlcyBpbiBpbnN0YWxsZXIgZm9yIC9kYXRhLyBmb2xkZXIgdHJvdWJsZXNob290
aW5nLg0KWypdIFBIUDogTWVzc2FnZXMgd2l0aCBlbWJlZGRlZCBpbWFnZXMgLSBmaXggaW4g
ZWRpdG9yLg0KWypdIEpTOiAiU2VhcmNoIiBmaWVsZCB0ZXh0IGxvY2FsaXphdGlvbiBpbXBs
ZW1lbnRlZC4NClsqXSBKUzogU2VhcmNoIHJlc3VsdHMgaGVhZGVyIGZpeGVkDQpbKl0gQ2Fs
ZW5kYXI6IFNoYXJlZCBjYWxlbmRhcnMgcHJlc2VudGF0aW9uIGZpeGVkDQpbKl0gQ2FsZW5k
YXI6IFNraW4gc2VsZWN0aW9uIGZpeGVkDQoNCjUuMC4wDQpbKl0gSlMgQ2FsZW5kYXI6IENv
ZGUgcmVmYWN0b3JpbmcgYW5kIG9wdGltaXphdGlvbi4NClsqXSAuTkVUOiBDb2RlIHJlZmFj
dG9yaW5nIGFuZCBvcHRpbWl6YXRpb24uDQpbK10gSlM6IFBIUCwgLk5FVDogTmV3ICh0aHJl
ZSBwYW5lIHZpZXcpIG1haW4gd2luZG93IGxheW91dA0KWytdIFBIUDogTW9iaWxlIHN5bmMN
ClsrXSBQSFAsIC5ORVQ6IFR3by13YXkgc3luY2luZyBvZiBjb250YWN0cyBhbmQgY2FsZW5k
YXIgZXZlbnRzDQpbKl0gLk5FVDogT3B0aW1pemVkIG1lbW9yeSB1c2FnZQ0KWypdIC5ORVQs
IFBIUDogTXVsdGlwbGUgbWlub3IgZml4ZXMuDQpbKl0gSlM6IENvbnRhY3RzIHNjcmVlbiBz
Y3JvbGxpbmcgaXNzdWUgZml4ZWQuDQpbKl0gLk5FVDogU3ViYWRtaW5zIG1hbmFnZW1lbnQg
aXNzdWUgd2l0aCBNeVNRTCB1c2VkIGlzIGZpeGVkLg0KWypdIC5ORVQ6IERhdGFiYXNlIHVw
ZGF0ZSBzY3JpcHQgY29ycmVjdGVkLg0KWytdIC5ORVQ6IFVwZGF0ZSBzY3JpcHQgaXMgdXBk
YXRpbmcgYWRtaW5wYW5lbC54bWwgZmlsZSBub3cgYXMgd2VsbC4NCg0KNC4xMC4wDQpbKl0g
SlMgQ2FsZW5kYXI6IFNldmVyYWwgdmlzdWFsIGlzc3VlcyBmaXhlZC4NClsqXSBKUyBDYWxl
bmRhcjogVGhlIGlzc3VlIHdpdGggZGVsZXRpbmcgZXZlbnRzIHJlcGVhdGVkIGF0IHNwZWNp
ZmljIHdlZWtkYXlzIGZpeGVkLg0KWypdIEpTIENhbGVuZGFyOiBCZWhhdmlvciBvZiBpbmxp
bmUgZWRpdGluZyBvZiBldmVudCBuYW1lIGNvcnJlY3RlZC4NClsrXSAuTkVULCBQSFA6IEF1
dG9tYXRlZCBtYWlsY2hlY2sgYXQgc3BlY2lmaWVkIHRpbWUgaW50ZXJ2YWwuDQpbK10gLk5F
VCwgUEhQOiBHbG9iYWwgYWRkcmVzcy1ib29rLCBlaXRoZXIgZG9tYWluLSBvciBzeXN0ZW0t
d2lkZSwgaXMgYWRkZWQgYXMgYSBzZXQgb2YgaGludHMgZm9yIG1lc3NhZ2UgY29tcG9zaW5n
IHNjcmVlbi4NClsrXSBQSFA6IEZvbGRlciBzeW5jIG9uIGxvZ2luIChjb25maWd1cmVkIHdp
dGhpbiBjb25zdGFudHMpLg0KWytdIC5ORVQsIFBIUDogTXVsdGlwbGUgYWRtaW5zIChzdWIt
YWRtaW5zIHdpdGggZG9tYWluLXNwZWNpZmljIHBlcm1pc3Npb25zIGdyYW50ZWQpLg0KWytd
IFBIUDogRmV3IEFQSSBtZXRob2RzIGFkZGVkIGZvciBkZWFsaW5nIHdpdGggYWNjb3VudHMu
DQpbK10gLk5FVCwgUEhQOiBTdXBwb3J0IGZvciBDaGluZXNlIFNpbXBsaWZpZWQgYW5kIENo
aW5lc2UgVHJhZGl0aW9uYWwgYWRkZWQuDQpbK10gLk5FVCwgUEhQOiBVcGxvYWRpbmcgYXR0
YWNobWVudHMgdXNpbmcgRmxhc2ggd2hlbiBhdmFpbGFibGUuDQpbKl0gLk5FVCwgUEhQOiBN
dWx0aXBsZSBtaW5vciBmaXhlcy4NCg0KNC45LjEwDQpbKl0gUEhQOiBDb2RlIGFkZGVkIGZv
ciBwcm9sb25naW5nIGNvb2tpZXMgb2YgIlNpZ24gbWUgaW4iIHBhcmFtZXRlcnMuDQpbKl0g
SlM6IE1ldGhvZCBjcmVhdGluZyBtZXNzYWdlIGJvZHkgcmVxdWVzdCBmaXhlZCAoc2l6ZSB3
YXNuJ3QgYWRkZWQgdW5kZXIgY2VydGFpbiBjb25kaXRpb25zKS4NCg0KNC45LjkNClsqXSBQ
SFA6IEJ1Z2ZpeDogQ0FQVENIQSB3YXMgY2hlY2tlZCBldmVuIGlmIG5vdCBkaXNwbGF5ZWQg
b24gbG9naW4gc2NyZWVuLg0KWypdIEpTOiBNZXNzYWdlIHVuaXF1ZW5lc3MgaXMgbm8gbG9u
Z2VyIGNoZWNrZWQgYmFzZWQgb24gaXRzIHNpemUuDQoNCjQuOS44DQpbK10gUEhQOiBBbnkg
bWVzc2FnZSBoZWFkZXIgY2FuIGJlIHByb2Nlc3NlZCBieSBmaWx0ZXJzIHRocm91Z2ggY3Vz
dG9tIGxheWVyIGZ1bmN0aW9uYWxpdHkuDQpbK10gUEhQIFN5bmMgUGx1Z2luOiBmaXhlZCB0
aGUgaXNzdWUgd2l0aCBkYXRlcyBmb3IgYWxsLWRheSBldmVudHMgbm90IHNhdmVkIGNvcnJl
Y3RseSBhZnRlciBzeW5jaHJvbml6YXRpb24uDQpbKl0gLk5FVDogVGhlIGNsYXNzIGRlYWxp
bmcgd2l0aCBQT1AzIG1vZGlmaWVkLg0KWypdIC5ORVQ6IERhdGFiYXNlIHVwZGF0aW5nIHNj
cmlwdCBtb2RpZmllZC4NCg0KNC45LjcNClsqXSBQSFA6IFNlc3Npb24tcmVsYXRlZCBmaXhl
cy4NClsqXSBQSFA6IFNvcnRpbmcgYnkgZGF0ZSBpbiBJTUFQNCB3aXRoIERpcmVjdCBNb2Rl
IHVzZWQgZm9yIGZvbGRlciBpcyBpbXByb3ZlZC4NClsqXSBQSFA6IElNQVAgZm9sZGVyIGlz
IG5vdyBzZWxlY3RlZCB1c2luZyBTRUxFQ1QgY29tbWFuZC4NClsqXSBQSFA6IElNQVAgZm9s
ZGVyIGlzIGFsd2F5cyBTRUxFQ1RlZCBldmVuIGlmIGl0IHdhcyBzZWxlY3RlZCBiZWZvcmUg
KHRvIHVwZGF0ZSBJTUFQIHNlcnZlciBjYWNoZSkuDQoNCjQuOS42DQpbKl0gUEhQOiBTVEFS
VFRMUyBzdXBwb3J0IGFkZGVkIGZvciBTTVRQLg0KWypdIFBIUDogUnVsZXMgZm9yIHBhcnNp
bmcgZW5jb2RlZCBtZXNzYWdlIGhlYWRlcnMgdXBkYXRlZC4NClsqXSBQSFA6IFNhdmluZyBw
cmltYXJ5X2hvc3RuYW1lIHZhbHVlICgiRGVmYXVsdCBEb21haW4iKSBmaXhlZCBpbiBhZG1p
bnBhbmVsLg0KWypdIFBIUDogU2V2ZXJhbCB0cmFuc2xhdGlvbnMgYWRkZWQuDQpbKl0gUEhQ
LCBKUyA6IEZldyBtaW5vciBmaXhlcy4NClsrXSBKUzogQ29uZGl0aW9uIGFkZGVkIGZvciBk
aXNwbGF5aW5nIGN1cnJlbnRseSBzZWxlY3RlZCBtZXNzYWdlIG9uIFhNTCBzZXJ2ZXIgcGFj
a2V0IGFycml2YWwuDQpbKl0gLk5FVDogYWRtaW5wYW5lbC54bWwgZmlsZSBmaXhlZC4NCg0K
NC45LjUNClsqXSAuTkVUOiBCdWdmaXg6IGNhbGVuZGFyIHNldHRpbmdzIHNhdmVkIGluY29y
cmVjdGx5DQpbKl0gLk5FVDogQnVnZml4OiBhdHRhY2hlZCBmaWxlcyB3aXRoIHRoZSBzYW1l
IGZpbGUgbmFtZXMgYWNjZXNzZWQgaW5jb3JyZWN0bHkNCg0KNC45LjQNClsqXSBKUzogU21h
bGwgdmlzdWFsIGZpeGVzLg0KWytdIEpTOiBIaWRlU3BhbUJ1dHRvbiB2YXJpYWJsZSBhZGRl
ZCBpbiBKUyBjb2RlLg0KWypdIFBIUDogRW5jb2RpbmcgbWVzc2FnZSBoZWFkZXJzIGNvcnJl
Y3RlZCwgbG9uZyB3b3JkcyBhcmUgbm8gbG9uZ2VyIHNwbGl0dCB3aGVuIGNoYXJzZXQgaXMg
b3RoZXIgdGhhbiBVVEYtOC4NClsqXSAuTkVUOiBJc3N1ZSB3aXRoIFNFVCBOQU1FUyB1c2Ug
Zm9yIE15U1FMIGZpeGVkLg0KDQo0LjkuMw0KWypdIFBIUDogQ2FsZW5kYXIgc2V0dGluZ3Mg
cmVxdWVzdCBmaXguDQoNCjQuOS4yDQpbKl0gLk5FVDogRml4ZWQgYnVnIHdpdGggbGltaXRl
ZCBib2R5IGxlbmd0aCB3aGVuIGNvbXBvc2luZyBhIG1lc3NhZ2UuDQpbKl0gSlM6IEZpeCBk
b21haW4gc2VsZWN0b3Igb24gbG9naW4gZm9ybS4NCg0KNC45LjENClsqXSBQSFA6IE1pbm9y
IG1vZGlmaWNhdGlvbnMgb2YgbGFuZ3VhZ2UgY29uc3RhbnRzLg0KWypdIFBIUDogU3VwcG9y
dCBmb3IgZGVtbyBwYWNrYWdlIGJ1aWxkaW5nLg0KWypdIEpTIENhbGVuZGFyOiBCdWdmaXg6
IEludmFsaWQgdGltZSBzZWxlY3Rpb24gZm9yIGV2ZW50IHdpdGggQU0vUE0gdGltZSBmb3Jt
YXQgZW5hYmxlZC4NClsqXSBKUyBDYWxlbmRhcjogRmV3IHZpc3VhbCBidWdzIGZpeGVkLg0K
DQo0LjkuMA0KWytdIFBIUDogTERBUCBzdXBwb3J0IGFkZGVkIChMREFQIGF1dGhlbnRpY2F0
aW9uIGFuZCBzZXJ2ZXIgY29udGFjdCBsaXN0KS4gVGhpcyBpcyBjdXN0b20tcHJvamVjdCBv
bmx5IG9wdGlvbi4NClsrXSBKUywgUEhQLCAuTkVUOiBmaWx0ZXIgbGlzdCBpbnRlcmZhY2Ug
YmVhdXRpZmllZC4NClsrXSBQSFA6IEFmdGVyTG9naWMgT3V0bG9vayBTeW5jIFBsdWdpbiBz
dXBwb3J0IGFkZGVkLg0KWytdIEpTLCBQSFAsIC5ORVQ6IFZpc3VhbCBpbmRpY2F0aW9uIGFz
IHRvIHRoZSBwcmlvcml0eSBhbmQgY29uZmlkZW50aWFsaXR5IG9mIHRoZSBtZXNzYWdlLiBU
aGlzIG9wdGlvbiBhdmFpbGFibGUgaW4gTWVzc2FnZSBMaXN0LCBQcmV2aWV3IGFuZCBGdWxs
IHBhbmUuDQpbK10gSlM6IFN5bnRheCBjaGVjayBvZiBlbWFpbCBhZGRyZXNzZXMgYmVmb3Jl
IHNlbmRpbmcgYSBtZXNzYWdlLg0KWytdIEpTOiBDYW5jZWwgbWVzc2FnZSBjb21wb3Npbmcg
YWJpbGl0eS4NClsrXSBKUywgUEhQOiBuby1yZXBseSBhbnN3ZXJzLg0KWytdIEpTOiBTdWJq
ZWN0IGFuZCBCb2R5IExlbmd0aHMuIEJvZHkgY291bnRlciBhbmQgcmVtYWluaW5nIGFsbG93
ZWQgY2hhcmFjdGVycy4NClsrXSBKUzogVGhlIHNpemUgb2YgdGhlIGF0dGFjaG1lbnQgaGFz
IHRvIGJlIHZlcmlmaWVkIHVwb24gc2VuZGluZy4NClsrXSBQSFA6IGxvZ2dpbmcgbGV2ZWwg
YW5kIGV2ZW50cyBsb2dnaW5nLg0KWytdIENhbGVuZGFyOiBBZGRlZCBldmVudCByZW1pbmRl
cnMuDQpbK10gQ2FsZW5kYXI6IEFkZGVkIGEgZmVhdHVyZSBmb3IgaW52aXRpbmcgb3RoZXIg
dXNlcnMgdG8gcGFydGljaXBhdGUgaW4gZXZlbnRzLg0KWytdIENhbGVuZGFyOiBDYWxlbmRh
cnMgZGlzcGxheSBzdGF0dXMgaXMgc2F2ZWQgdG8gdGhlIGRhdGFiYXNlIGFuZCByZXN0b3Jl
ZCBvbiBuZXh0IGxvZ2luLg0KWypdIEpTLCBQSFAsIC5ORVQ6IFNwYW0gZm9sZGVyIGFsb25n
IHdpdGggIlNwYW0iICYgIk5vdCBTcGFtIiBidXR0b25zIGFkZGVkIHRvIGV2ZXJ5IHByb3Rv
Y29sLg0KWypdIEpTLCBQSFAsIC5ORVQ6IE1lc3NhZ2UgY2FuIGJlIGRlbGV0ZWQgZnJvbSBz
ZXJ2ZXIgaW1tZWRpYXRlbHkgaWYgaXQncyBub3QgcG9zc2libGUgdG8gbW92ZSBpdCB0byBU
cmFzaCBmb2xkZXIuDQpbKl0gUEhQOiBNZXNzYWdlIHNvcnRpbmcgaW4gSU1BUDQgZm9sZGVy
cyBjb25maWd1cmVkIGZvciBEaXJlY3QgTW9kZSBhY2Nlc3MgaGFzIGJlZW4gZW5oYW5jZWQu
DQpbKl0gSlMgQ2FsZW5kYXI6IEJ1Z2ZpeDogdGltZSBvZiBldmVudCBlbmQgd2FzIHNlbGVj
dGVkIGluY29ycmVjdGx5IHdoZW4gc2VsZWN0aW5nIHRpbWUgb2YgZXZlbnQgc3RhcnQuDQpb
Kl0gSlMgQ2FsZW5kYXI6IEJ1Z2ZpeDogY2FsZW5kYXIgY2VsbHMgd2VyZSBzZWxlY3RlZCBp
bmNvcnJlY3RseSBpZiBzeXN0ZW0gZm9udHMgd2VyZSBvZiB0b28gYmlnIG9yIHRvbyBzbWFs
bCBzaXplLg0KWypdIC5ORVQ6IGEgZml4IGZvciBkZWFsaW5nIHdpdGggY2hhcnNldCB1c2Vk
IGluIE15U1FMIGhhcyBiZWVuIGFwcGxpZWQuDQoNCjQuOC4yMA0KWypdIC5ORVQ6IEJ1Z2Zp
eDogSU1BUCBvcHRpbWl6YXRpb24uDQoNCjQuOC4xOQ0KWypdIC5ORVQ6IFNvbWUgYnVnZml4
ZXMuDQoNCjQuOC4xOA0KWypdIC5ORVQ6IE15U1FMIGlzc3VlIGluIFdpbmRvd3MgNjQtYml0
IGZpeGVkLg0KDQo0LjguMTcNClsqXSAuTkVUOiAiSXNzdWUgb2YgRGVjZW1iZXIiIGZpeGVk
IGluIGNhbGVuZGFyLg0KDQo0LjguMTYNClsqXSAuTkVUOiBTb21lIGJ1Z2ZpeGVzLg0KDQo0
LjguMTUNClsqXSAuTkVUOiBCdWdmaXg6IHRlc3QgY29ubmVjdGlvbiB0byBNeVNRTCBkYXRh
YmFzZSBpbiB0aGUgaW5zdGFsbGVyLg0KWypdIC5ORVQ6IEJ1Z2ZpeDogSmF2YVNjcmlwdCBl
cnJvciBvbiAiRGF0YWJhc2UgU2V0dGluZ3MiIHNjcmVlbiBpbiBBZG1pbiBQYW5lbC4NClsq
XSBQSFA6IEJ1Z2ZpeDogZGVmYXVsdCBzeW5jIG1vZGUgZm9yIFBPUDMgYWNjb3VudHMuDQoN
CjQuOC4xMw0KWypdIC5ORVQ6IEJ1Z2ZpeDogcmVwbHkgdG8gZm91bmQgbWVzc2FnZSAoaW4g
c2VhcmNoKSBmb3IgbmF0aXZlIFhNYWlsIGFjY291bnRzDQpbKl0gLk5FVDogQnVnZml4OiBv
biBkZWxldGluZyAobW92aW5nIHRvICJUcmFzaCIgZm9sZGVyIGluICJEb24ndCBzeW5jaHJv
bml6ZSIgbW9kZSksIHJlYWQgbWVzc2FnZSBiYWNhbWUgdW5yZWFkIChJTUFQNCkuDQpbK10g
Lk5FVCwgUEhQOiA1LVVzZXJzIGxpY2Vuc2UgYWRkZWQuDQoNCjQuOC4xMg0KWypdIFBIUDog
TWlub3IgYnVnZml4IGluIGxpY2Vuc2luZyBzeXN0ZW0uDQpbKl0gSlM6IEJ1Z2ZpeDogY2hh
bmdpbmcgcGFzc3dvcmQgaW4gbmF0aXZlIFhNYWlsIGFjY291bnQgIChQSFAgdmVyc2lvbiku
DQpbKl0gLk5FVDogQWRkaXRpb25hbCBjaGVja3MgYWRkZWQgdG8gdGhlIGluc3RhbGxhdGlv
biBzY3JpcHQuDQoNCjQuOC4xMA0KWypdIC5ORVQ6IEJ1Z2ZpeDogcHJlLWZldGNoIGluIElN
QVAuDQpbKl0gLk5FVDogQnVnZml4OiBJTUFQIG9wdGltaXphdGlvbi4NClsqXSAuTkVUOiBC
dWdmaXg6IHNvbWUgbWVzc2FnZXMgaW4gSU1BUCBhY2NvdW50cyB3ZXJlIGRpc3BsYXllZCBp
bmNvcnJlY3RseS4NClsqXSBKUzogQnVnZml4OiBjaGFuZ2luZyBwYXNzd29yZCBpbiBuYXRp
dmUgWE1haWwgYWNjb3VudC4NCg0KNC44LjkNClsrXSAuTkVUOiBPbiBhZGRpbmcgZG9tYWlu
cyBhbmQgdXNlcnMgd2hpY2ggZXhpc3Qgb24gbWFpbCBzZXJ2ZXIsIGJ1dCBkb24ndCBleGlz
dCBpbiBXZWJNYWlsIGRhdGFiYXNlLCB0aGUgdXNlcnMgYXJlIGFkZGVkIGludG8gV2ViTWFp
bCBkYXRhYmFzZS4NClsqXSAuTkVUOiBNYWlsQmVlLk5FVC5kbGwgdXBkYXRlZC4NClstXSBK
UzogTG9nZ2luZyBpbiBNYW5hZ2UgRm9sZGVycyBzY3JlZW4gcmVtb3ZlZC4NCg0KNC44LjgN
ClsqXSBQSFAgQ2FsZW5kYXI6IEEgYnVnIGluIHN5bmNocm9uaXppbmcgd2l0aCBPdXRsb29r
IGZpeGVkLiBPbmx5IHRoZSBsYXN0IGNhbGVuZGFyIHdhcyBzeW5jaHJvbml6ZWQuDQpbKl0g
Lk5FVDogRXhjZXB0aW9uIGhhbmRsaW5nIGFuZCBsb2dnaW5nIHN1YnN5c3RlbSBpbXByb3Zl
ZC4NClsqXSAuTkVUOiBNaXNzaW5nIGNvbnN0YW50cyBhZGRlZCB0byBsYW5ndWFnZSBmaWxl
cy4NClsqXSBQSFA6IEJ1Z2ZpeDogVVRGLTcgZGVjb2RpbmcgaW1hcCBmb2xkZXIgbmFtZXMg
d2l0aCAmIGluIG5hbWUuDQpbKl0gUEhQOiBCdWdmaXg6IEpTIGhhbmRsZXIgd2FzIG5vdCBh
ZGRlZCB0byBtYWlsdG8gbGlua3MuDQpbKl0gUEhQOiBCdWdmaXg6IGxvZ291dCBpbiBQREEg
dmVyc2lvbiBkaWRuJ3QgY2xlYXIgU2lnbiBNZSBjb29raWUuDQpbKl0gSlM6IE11bHRpcGxl
IHByZS1mZXRjaCBxdWVyeSBtZXNzYWdlX2JvZHkgcmV0dXJuZWQgYmFjay4NCg0KNC44LjcN
ClsrXSAuTkVUOiBtYWlsdG8gbGlua3Mgbm93IGdvIHRvIG1lc3NhZ2UgY29tcG9zZSBzY3Jl
ZW4uDQpbKl0gSlM6IGJ1Z2ZpeDogZGlzcGxheWluZyBib3JkZXIgb2YgImNvbnRhY3QgaW5m
byIgZm9ybSBpbiBJRS4NClsqXSBKUzogYnVnZml4OiBzZWxlY3RpbmcgY29udGFjdHMgaW4g
Y29udGFjdHMgbGlzdC4NClsqXSBQSFA6IENoYW5nZWQgZXJyb3IgbWVzc2FnZSBhYm91dCBm
aWxlIGJlaW5nIGltcG9ydGVkIGlzIGVtcHR5Lg0KWypdIFBIUDogTWlzc2luZyBsYW5ndWFn
ZSBjb25zdGFudHMgYWRkZWQuDQpbKl0gLk5FVCwgUEhQOiBBcmFiaWMgbGFuZ3VhZ2UgdXBk
YXRlZC4NCg0KNC44LjYNClsrXSBKUywgUEhQOiBtYWlsdG8gbGlua3Mgbm93IGdvIHRvIG1l
c3NhZ2UgY29tcG9zZSBzY3JlZW4uDQpbK10gLk5FVCwgUEhQOiBKYXBhbmVzZSB0cmFuc2xh
dGlvbiBhZGRlZC4NClsqXSAuTkVUOiBhIGJ1ZyB3aXRoIGVkaXRpbmcgZG9tYWlucyBzZXR0
aW5ncyBpbiBBZG1pbiBQYW5lbCBmaXhlZC4NCg0KNC44LjUNClsqXSBKUzogSXJyZWxldmFu
dCBwYXJ0cyBpbiBtZXNzYWdlX2JvZHkgcmVxdWVzdCByZW1vdmVkLg0KWypdIEpTOiBtZXNz
YWdlX2JvZHkgcmVxdWVzdCBpcyBub3cgcGVyZm9ybWVkIG11bHRpcGxlIHRpbWVzLCBidXQg
aXQgZG9lc24ndCByZXF1ZXN0IGFsbCBtZXNzYWdlcyBvbiBwYWdlIGFueW1vcmUsIGJ1dCBv
bmx5IDUgKGNvbmZpZ3VyYWJsZSAtIHByZUZldGNoTXNnTGltaXQgaW4gX2RlZmluZXMuanMp
Lg0KWypdIEpTOiBVc2VQcmVmZXRjaCBmbGFnIGFkZGVkIHRvIF9kZWZpbmVzLmpzIGZvciBk
aXNhYmxpbmcgbWVzc2FnZV9ib2R5IHJlcXVlc3RzLg0KWytdIC5ORVQsIFBIUDogVHdvIGxp
Y2Vuc2UgdHlwZXMgYWRkZWQgKDI1IGFuZCAyNTAgdXNlcnMpLg0KWypdIC5ORVQ6IFNvbWUg
YWRqdXN0bWVudHMgaW4gaW5zdGFsbGF0aW9uIHJvdXRpbmUuDQpbKl0gLlBIUDogQnVnZml4
OiBtZXNzYWdlcyBhcmUgbm93IHNlbnQgd2l0aCBhdHRhY2htZW50cyB3aXRoIG5hbWVzIFVU
Ri04IGVuY29kZWQuIFRoaXMgcmVzb2x2ZXMgdGhlIGlzc3VlIHdpdGggZW1wdHkgbmFtZXMg
d2hlbiwgZS5nLiBjeXJpbGxpYyA8LT4gdHVya2lzaCBjb252ZXJzaW9uLg0KDQo0LjguNA0K
WypdIEpTOiBGb2xkZXJzIHNvcnRpbmcgaW4gTWFuYWdlIEZvbGRlcnMgc2NyZWVuIGZpeGVk
Lg0KWypdIC5ORVQ6IEVycm9yIG9uIGxvZ2luIGluIFBEQSB2ZXJzaW9uIGZpeGVkLCBpdCBv
Y2N1cmVkIHdpdGggQWR2YW5jZWQgTG9naW4gZGlzYWJsZWQuDQpbKl0gLk5FVDogTWlub3Ig
aXNzdWVzIHdpdGhpbiBpbnRlZ3JhdGlvbiBtZXRob2RzIGZpeGVkLg0KDQo0LjguMw0KWy1d
IEpTOiB1bm5lY2Vzc2FyeSBBSkFYIHJlcXVlc3RzIHJlbW92ZWQuDQpbLV0gUEhQOiBSZW1v
dmVkIGV4dHJhIEpTIGNvZGUgZnJvbSBpbmRleC5waHAuDQpbLV0gUEhQOiBJbmJveCByZW1v
dmVkIGZyb20gZm9sZGVyIGxpc3QgaW4gZm9sZGVyX2Jhc2UgcmVxdWVzdC4NClsqXSAuTkVU
LCBQSFA6IFJlbW92ZWQgc2V0dGluZyBleHRyYSAvc2VlbiBmbGFnIG9uIG1haWxjaGVjay4N
ClsqXSBKUyBDYWxlbmRhcjogQnVnZml4OiBjYWxjdWxhdGlvbiBvZiBldmVudHMgcmVwZWF0
ZWQgaW4gY3VzdG9tIHdheSAoTW9uIC0gV2VkIC0gU2F0IC0gLi4uKS4NClsqXSBKUyBDYWxl
bmRhcjogQnVnZml4OiBkYXRlIHNoaWZ0ZWQgdG8gbmV4dCBkYXkgd2hlbiBzdGFydCB0aW1l
IHNldCB0byBtaWRuaWdodC4NClsqXSBKUyBDYWxlbmRhcjogQnVnZml4OiBjYWxjdWxhdGlv
biBvZiBldmVudHMgcmVwZWF0ZWQgb25jZSBhIG1vbnRoIHdpdGggZ2l2ZW4gbnVtYmVyIG9m
IGl0ZXJhdGlvbnMgb3IgZW5kIGRhdGUgc2V0Lg0KWypdIEpTIENhbGVuZGFyOiBCdWdmaXg6
IGV2ZW50IGVkaXQgd2luZG93IHNoYWRvdyBpbiBJbnRlcm5ldCBFeHBsb3JlciA4Lg0KWypd
IEpTIENhbGVuZGFyOiBCdWdmaXg6IGVkaXQgd2luZG93IG5vdCByZW1vdmVkIGFmdGVyIGRl
bGV0aW5nIGV2ZW50IGxhc3Rpbmcgc2V2ZXJhbCBkYXlzLg0KDQo0LjguMg0KWypdIC5ORVQ6
IEJ1Z2ZpeDogbGFuZ3VhZ2Ugc2VsZWN0aW9uIGF0IGxvZ2luIHNjcmVlbg0KWypdIC5ORVQ6
IFNvbWUgYnVnZml4ZXMgaW4gUERBIHZlcnNpb24uDQpbKl0gLk5FVDogSW1wcm92ZWQgbG9n
Z2luZyBlcnJvcnMgc3Vic3lzdGVtLg0KDQo0LjguMQ0KWypdIC5ORVQ6IFNvbWUgYnVnZml4
ZXMgaW4gY2FsZW5kYXINCg0KNC44LjANClsqXSBKUzogVmlldyBsaW5rIGZvciBQTkcgaW1h
Z2VzIGFkZGVkLg0KWypdIE5FVDogSW1wb3J0IGNvbnRhY3RzIGZyb20gQ1NWIGZpbGUgZnVu
Y3Rpb24gY2hhbmdlZC4gTm93LCBjb250YWN0cyBmYWlsZWQgdG8gYmUgcHJvY2Vzc2VkIGFy
ZSBqdXN0IHNraXBwZWQgd2l0aG91dCBzdG9wcGluZyBlbnRpcmUgaW1wb3J0aW5nIHByb2Nl
c3MuDQpbKl0gTkVULCBQSFA6IE5ldyBQREEgdmVyc2lvbiBvZiB0aGUgVUkgcmVwbGFjZWQg
dGhlIG9sZCAiY2xhc3NpYyBIVE1MIiB2ZXJzaW9uLiAiQ2xhc3NpYyBIVE1MIiBtb2RlIGlz
IG5vdCBhdmFpbGFibGUgYW55bW9yZS4NClsqXSBORVQsIFBIUDogT3V0bG9vayBTeW5jIFBs
dWctaW4gYWRkZWQuDQpbKl0gTkVULCBQSFA6ICJFLW1haWwgaWRlbnRpdGllcyIgaW1wbGVt
ZW50ZWQuDQpbKl0gTkVULCBQSFA6IE1hbnkgbWlub3IgYnVnZml4ZXMgYW5kIGltcHJvdmVt
ZW50cy4NCg0KNC43LjE0DQpbKl0gLk5FVDogTWFpbEJlZS5ORVQuZGxsIHVwZGF0ZWQuDQpb
Kl0gLk5FVDogQnVnZml4OiBudWxsIHJlZmVyZW5jZSBlcnJvciBvbiBzd2l0Y2hpbmcgZm9s
ZGVycyBpbiBkaXJlY3QgbW9kZQ0KDQo0LjcuMTINClsqXSAuTkVUOiBTb21lIG1pbm9yIG9w
dGltaXphdGlvbnMgYW5kIGltcHJvdmVtZW50cy4NCg0KNC43LjExDQpbKl0gLk5FVDogU2ln
bmlmaWNhbnRseSBvcHRpbWl6ZWQgbWVtb3J5IHVzYWdlLg0KWypdIC5ORVQ6IEJ1Z2ZpeDog
bWVzc2FnZSByZWFkIGZsYWcgd2FzIG5vdCBzZXQuDQpbKl0gLk5FVDogQnVnZml4OiBhdHRh
Y2htZW50cyBsYXJnZXIgdGhhbiAyMEtCIHdhcyBub3QgbG9hZGVkIGluIGNhc2Ugb2YgdXNp
bmcgSU1BUC4NClsqXSAuTkVULCBQSFA6IENyb3NzLXNpdGUgc2NyaXB0aW5nIHZ1bG5lcmFi
aWxpdHkgcmVzb2x2ZWQuDQoNCjQuNy4xMA0KWypdIC5ORVQ6IEFkbWluUGFuZWwgaXMgbm90
IGEgc2VwYXJhdGUgd2ViIGFwcGxpY2F0aW9uLCBidXQgYSBwYXJ0IG9mIFdlYk1haWwgYXBw
bGljYXRpb24gbm93Lg0KWypdIC5ORVQ6IFNhdmluZyBzZXR0aW5ncyBpbiBQT1AzIGFjY291
bnQgYnVnIGZpeGVkLg0KWypdIC5ORVQ6IEJ1ZyB3aXRoIGRlbGV0aW5nIG1haWwgaW4gRnVs
bC12aWV3IGZpeGVkLg0KWypdIC5ORVQ6IEEgYnVnIGluIG5hdGl2ZSBwcm90b2NvbCBpcyBm
aXhlZC4gSWYgYSBtZXNzYWdlIHdhcyBkZWxldGVkIGZyb20gbWFpbCBzZXJ2ZXIsIGl0IHdh
cyBpbXBvc3NpYmxlIHRvIGRlbGV0ZSBpdCBmcm9tIHRoZSBkYXRhYmFzZS4NCg0KNC43LjkN
ClsqXSAuTkVUOiBCdWdmaXg6IGlzc3VlIHdpdGggZHVwbGljYXRlIG1lc3NhZ2VzIGluIHRy
YXNoIGZvbGRlciAoRGlyZWN0IE1vZGUsIFBPUDMpLg0KDQo0LjcuOA0KWypdIEpTOiBGaXhl
ZCBpc3N1ZSB3aXRoIHN5c3RlbSBmb2xkZXIgbmFtZXMgbm90IHRyYW5zbGF0ZWQgd2hlbiBt
ZXNzYWdlIGxpc3QgaXMgZGlzcGxheWVkLg0KWypdIC5ORVQ6IEZpeGVkIGlzc3VlIHdpdGgg
bWVzc2FnZXMgbm90IGRlbGV0ZWQgZnJvbSB0aGUgZGF0YWJhc2Ugd2hlbiBzZW5kaW5nIG1l
c3NhZ2VzIGZyb20gRHJhZnRzLg0KDQo0LjcuNw0KWypdIC5ORVQ6IEZpeGVkIGlzc3VlIHdp
dGggZGlzcGxheWluZyBhdHRhY2htZW50IHNpemUgaW4gSU1BUCB3aGVuIG1lc3NhZ2Ugc2l6
ZSBpcyBvdmVyIDIwS2IuDQpbKl0gLk5FVDogRml4ZWQgZW5jb2RpbmcgaXNzdWUgaW4gSU1B
UCB3aGVuIG1lc3NhZ2Ugc3ViamVjdCBpcyBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQuDQpb
Kl0gLk5FVDogRm9sZGVycyBpbiBuYXRpdmUgbW9kZSBhcmUgY3JlYXRlZCBpbiBVdGY3TW9k
aWZpZWQgZW5jb2RpbmcgZm9yIG5vbi1sYXRpbiBjaGFyYWN0ZXJzLg0KWypdIC5ORVQ6IEZp
eGVkIGlzc3VlIHdpdGggZGVsZXRpbmcgbWVzc2FnZXMgZnJvbSBkYXRhYmFzZSBpbiBOZXcg
SGVhZGVycyBzeW5jLm1vZGUgZm9yIEltYXA0RGVsZXRlTGlrZVBvcDMgPSAxLg0KDQo0Ljcu
Ng0KWypdIFBIUDogRml4ZWQgY2hlY2tpbmcgbGljZW5zZSBrZXkgaW4gQUpBWCBxdWVyaWVz
Lg0KWypdIEpTOiBTeXN0ZW0gZm9sZGVycyBuYW1lcyBhcmUgbm93IGxvY2FsaXplZCBpbiBJ
TUFQIG1vZGUuDQpbK10gUEhQOiBDb21wbGV0ZWQgbG9jYWxpemF0aW9ucyBmb3Igc2V2ZXJh
bCBsYW5ndWFnZXMuDQoNCjQuNy41DQpbKl0gLk5FVDogQnVnZml4OiBBIHByb2JsZW0gd2l0
aCBzaWduYXR1cmUgZW5jb2RpbmcgaW4gY2FzZSBvZiBNUyBBY2Nlc3Mgb3IgTXlTUUwgZGF0
YWJhc2UgZW5naW5lLg0KWypdIFBIUDogUHJvY2Vzc2luZyBsaXRlcmFscyBpbiBCT0RZU1RS
VUNUVVJFIHF1ZXJpZXMgYWRkZWQuDQpbKl0gUEhQOiBCdWdmaXg6IEluY29ycmVjdCAiTG9j
YXRpb24iIGhlYWRlcnMuDQoNCjQuNy40DQpbK10gUEhQOiBNaWdyYXRpb24gdG8gUEhQIDUu
MS4wIChhZGRlZCAiY2xvbmUiIG9wZXJhdG9yIHVzaW5nIGluIEFkbWluIFBhbmVsICsgaW5z
dGFsbCBzY3JpcHQgbm93IGNoZWNrcyBpZiBQSFAgdmVyc2lvbiBpcyA+PSA1LjEuMCkuIFBI
UCA0LlggYW5kIDUuMCBpcyBub3Qgc3VwcG9ydGVkIGFueW1vcmUuDQpbKl0gLk5FVDogU29t
ZSBvcHRpbWl6YXRpb25zIGluIG5hdGl2ZSBBZnRlckxvZ2ljIFhNYWlsIFNlcnZlciBtb2Rl
Lg0KWypdIC5ORVQ6IEJ1Z2ZpeDogaW5jLmNhbGVuZGFyLXNldHRpbmdzLmpzIHdhcyBub3Qg
bG9hZGVkLg0KWypdIFBIUDogQnVnZml4OiAiRW5hYmxlIHRvIG9wZW4gc2l0ZSIgaW4gQWRt
aW4gUGFuZWwgaW4gSUUuDQpbK10gUEhQOiBBZGRpdGlvbmFsIGNvbmRpdGlvbiBmb3IgZGV0
ZWN0aW5nIGF0dGFjaG1lbnRzIGluIEJPRFlTVFJVQ1RVUkUgcXVlcmllcyBhZGRlZC4NCg0K
NC43LjMNClsqXSAuTkVUOiAiUGFyc2luZyAndXJsKCcgLSBOb3QgZW5vdWdoICkncyIgZXJy
b3IgZml4ZWQuDQoNCjQuNy4yDQpbKl0gUEhQOiBCdWdmaXg6IHNpZ24tdXAgb24gbG9nZ2lu
ZyBpbg0KWypdIFBIUDogQnVnZml4OiBjYWNoaW5nIGRpc3BsYXllZCBtZXNzYWdlcyBpbiBQ
T1AzIGFjY291bnRzIHdvcmtlZCBpbmNvcnJlY3RseSBpbiBjYXNlIG9mIFN0b3JlTWFpbHNJ
bkRiIGVuYWJsZWQuDQpbKl0gLk5FVDogQnVnZml4OiBjcmVhdGluZyBhbmQgZ2V0dGluZyBk
b21haW5zIGxpc3QgdGhyb3VnaCBBUEkgaW4gY2FzZSBvZiBNUyBBY2Nlc3MgZGF0YWJhc2Ug
ZW5naW5lLg0KWypdIC5ORVQ6IEJ1Z2ZpeDogSW1hcDREZWxldGVMaWtlUG9wMyBwYXJhbWV0
ZXIgd2FzIG5vdCBwcm9jZXNzZWQgaW4gQWRtaW5QYW5lbC4NClsqXSAuTkVUOiBCdWdmaXg6
IHVzZXIgc2V0dGluZ3Mgd2VyZSBub3QgZGVsZXRlZCBhbmQgIm51bWJlciBvZiB1c2VycyBh
bGxvd2VkIGJ5IGxpY2Vuc2UiIGxpbWl0IHdhcyBub3QgdXBkYXRlZCB3aGVuIGFjY291bnQg
d2FzIGRlbGV0ZWQgdGhyb3VnaCBBUEkuDQpbKl0gLk5FVCwgUEhQOiBBZGRpbmcgdXNlcnMg
YmVoYXZpb3IgY2hhbmdlZCBpbiBjYXNlIHdoZW4gIm51bWJlciBvZiB1c2VycyBhbGxvd2Vk
IGJ5IGxpY2Vuc2UiIGxpbWl0IGV4Y2VlZGVkLiBOb3csIHVzZXJzIGFyZSBub3QgY3JlYXRl
ZC4NClsqXSAuTkVUOiBCdWdmaXg6ICJ3bXhfIiBwcmVmaXggZm9yICJiYWNrZ3JvdW5kIiBw
YXJhbWV0ZXIuIE5vdyBvbmx5ICJzcmMiIO+/vSAidXJsKCIgKHBhcmFtZXRlcnMvc3R5bGVz
KSBhcmUgcmVtb3ZlZC4NCg0KNC43LjENClsqXSBKUyBDYWxlbmRhcjogRml4ZWQgYnVnIHdp
dGggZXZlbnQgd2hpY2ggY29udGludWVzIGluIHRoZSBuZXh0IHllYXIuDQpbKl0gSlMgQ2Fs
ZW5kYXI6IEJ1Z2ZpeDogSW4gSUU2LCBib3JkZXIgb2YgZXZlbnQgZWRpdGluZy9zYXZpbmcg
d2luZG93IHdhcyBkaXNwbGF5ZWQgaW5jb3JyZWN0bHkuDQpbKl0gUEhQLCAuTkVUOiBBbGwg
Y2FsZW5kYXIgSlMgZmlsZXMgbW92ZWQgdG8ganMgZm9sZGVyIGZvciBiZXR0ZXIgcHJvamVj
dCBzdHJ1Y3R1cmUuDQpbKl0gLk5FVDogTWVzc2FnZXMgYXJlIG1vdmVkIHRvIFRyYXNoIGZv
bGRlciBvbiBkZWxldGluZyBpbiBESVJFQ1QgTU9ERS4NClsqXSAuTkVUOiBCdWdmaXg6ICJU
cnVlIiB3YXMgYWx3YXlzIHNhdmVkIHRvIFVzZXIgRnJpZW5kbHkgTmFtZSBmaWxlZCBpbiBj
YXNlIG9mIE1TIEFjY2VzcyBkYXRhYmFzZS4NClsqXSBQSFA6IEJ1Z2ZpeDogIndteF8iIHBy
ZWZpeCBmb3IgImJhY2tncm91bmQiIHBhcmFtZXRlci4gTm93IG9ubHkgInNyYyIg77+9ICJ1
cmwoIiAocGFyYW1ldGVycy9zdHlsZXMpIGFyZSByZW1vdmVkLg0KWypdIFBIUDogU29tZSBs
YW5ndWFnZSBjb25zdGFudHMgdXBkYXRlZC4NCg0KNC43DQpbKl0gLk5FVCBDYWxlbmRhcjog
QnVnZml4OiBlZGl0aW5nIHJlY3VycmVudCBldmVudCBjYXVzZWQgSlMtZXJyb3IgYW5kIG5v
bi1zYXZpbmcgdGhlIGV2ZW50Lg0KWypdIEpTIENhbGVuZGFyOiBCdWdmaXg6IEluIElFIDYt
NywgYWZ0ZXIgZGVsZXRpbmcvc2F2aW5nL2NyZWF0aW5nIHJlY3VycmVudCBldmVudHMsIHJl
Y3VycmVuY2UgYXJlYSB3YXMgZGlzcGxheWVkIChzaG91bGQgYmUgaGlkZGVuKSBvbiBvcGVu
aW5nIGVkaXQgd2luZG93Lg0KWytdIFBIUCwgLk5FVDogUmV0cmlldmluZyBCT0RZU1RSVUNU
VVJFIGZvciBtZXNzYWdlcyBsYXJnZXIgdGhhbiAyMEtCIGluIElNQVAgKGdldHRpbmcgb25s
eSBkYXRhIHdoaWNoIGlzIGN1cnJlbnRseSByZWxldmFudCkuDQpbK10gUEhQOiBHZXR0aW5n
IG1lc3NhZ2UgbGlzdCB2aWEgYSBzaW5nbGUgSU1BUCBxdWVyeS4NClsrXSBQSFAsIC5ORVQs
IEpTOiBGb2xkZXJzIG1hcHBpbmcgKG5vdywgaXQncyBwb3NzaWJsZSB0byBtYXAgYW55IFdl
Yk1haWwgZm9sZGVyIHRvIGFueSBJTUFQIHNlcnZlciBmb2xkZXIpLg0KWypdIFBIUDogSW1w
cm92ZW1lbnQ6IHdoZW4gSU1BUCBxdW90YXMgZW5hYmxlZCwgV2ViTWFpbCBnZXRzIG5vdCBv
bmx5IG1haWxib3ggbGltaXQsIGJ1dCBhbHNvIGFtb3VudCBvZiBzcGFjZSB1c2VkIG9uIHNl
cnZlci4NClsqXSBQSFAsIC5ORVQ6IEFsbCBKUyBmaWxlcyBhcmUgbW92ZWQgdG8ganMgZm9s
ZGVyIGZvciBiZXR0ZXIgcHJvamVjdCBzdHJ1Y3R1cmUuDQpbK10gUEhQLCAuTkVUOiBSZXF1
ZXN0IFJlYWQgQ29uZmlybWF0aW9uIGZlYXR1cmUgaW1wbGVtZW50ZWQuDQpbKl0gUEhQOiBG
aWxlcyB3aXRoIGNsYXNzXyBwcmVmaXggbW92ZWQgdG8gY29tbW9uIGZvbGRlciBmb3IgYmV0
dGVyIHByb2plY3Qgc3RydWN0dXJlLiBOb3csIHRoZSByb290IGZvbGRlciBjb250YWlucyBv
bmx5IGZpbGVzIHdoaWNoIHNob3VsZCBiZSBhdmFpbGFibGUgZm9yIGFjY2Vzc2luZyB0aHJv
dWdoIHdlYi4NClsqXSBQSFA6ICJDdXN0b21pemF0aW9uIGNsYXNzZXMiICh3bV9DdXN0b20s
IGFwX0N1c3RvbSkgaW1wcm92ZWQuIE5vdywgYWxsIHRoZSBjYWxscyBhcmUgc3RhdGljIGFu
ZCBkb24ndCByZXF1aXJlIGluc3RhbnRpYXRpbmcgdGhlIGFwcHJvcHJpYXRlIGNsYXNzIGlu
IHRoZSBjb2RlLg0KWypdIEpTOiBPbiBmb3J3YXJkaW5nIG1lc3NhZ2UgaW4gYSBmb2xkZXIg
aW4gRGlyZWN0IE1vZGUsIGZvcndhcmQgaWNvbiBpcyBub3Qgc2V0IGFueW1vcmUgKCJmb3J3
YXJkZWQiIGlzbid0IGEgc3RhbmRhcmQgSU1BUCBmbGFnKSBhcyBpdCBjYXVzZWQgYSB2aXN1
YWwgYnVnLg0KWytdIEpTOiBBZGRlZCBjYWNoaW5nIG9mIGNvbnRhY3RzL2dyb3VwcyBsaXN0
cyB1bmRlciBzb21lIGNpcmN1bXN0YW5jZXMgKHNlbmRpbmcgbWVzc2FnZSwgaW1wb3J0aW5n
IGNvbnRhY3RzLCBhZGRpbmcgdG8gZ3JvdXAgdGhyb3VnaCBtZW51KS4NClsrXSBKUzogQWRk
ZWQgc2Nyb2xsYmFyIG9uIG1vdmluZyBmcm9tIG1lc3NhZ2UgdG8gbWVzc2FnZSBpbiBGdWxs
IFZpZXcgbW9kZS4NClsrXSBKUzogUHJvY2Vzc2luZyBvZiAiZW50ZXIiIGtleSBhZGRlZCB0
byBzZXR0aW5ncyBvZiBhZGRyZXNzIGJvb2suDQpbKl0gSlM6IEJ1Z2ZpeDogbWVzc2FnZSB3
YXMgbm90IGxvYWRlZCB0byBjb21wb3NlIHNjcmVlbiB3aGVuIG9wZW5lZCBmcm9tIERyYWZ0
cy4NClsqXSBKUzogQnVnZml4OiBmb2xkZXJzIGFuZCBtZXNzYWdlcyBsaXN0cyB3ZXJlIG5v
dCBkaXNwbGF5ZWQgaWYgV2ViTWFpbCBzdGFydGVkIGZyb20gY29tcG9zZSBtZXNzYWdlIHNj
cmVlbi4NClsqXSAuTkVUOiBCdWdmaXg6IEJDQyBoZWFkZXIgd2FzIG5vdCByZW1vdmVkIHdo
ZW4gbWVzc2FnZSBzZW50IHRocm91Z2ggbmF0aXZlIFhNYWlsIGFjY291bnQuDQpbKl0gSlMg
Q2FsZW5kYXI6IEJ1Z2ZpeDogb24gbGFzdCBkYXlzIG9mIHllYXIsIHJlY3VycmVudCBldmVu
dHMgY29udGludWluZyBpbiB0aGUgbmV4dCB5ZWFyIHdlcmUgbm90IGRpc3BsYXllZC4NClsq
XSBKUyBDYWxlbmRhcjogQnVnZml4OiByZWN1cnJlbmNlIGVuZCBkYXRlIHdhcyByZXNldCBv
biBjaGFuZ2luZyByZWN1cnJlbmNlIHBlcmlvZC4NCg0KDQo0LjYuMTMNClsqXSAuTkVUOiBB
IHByb2JsZW0gd2l0aCBGcmllbmRseSBOYW1lIGVuY29kaW5nIGlzIGZpeGVkLg0KDQo0LjYu
MTINClsqXSAuTkVUOiBCdWdmaXg6IG9idGFpbmluZyBzaGFyZWQgY2FsZW5kYXJzDQpbKl0g
SlM6IEJ1Z2ZpeDogc3RvcmluZyBkYXRhIGludG8gc2Vzc2lvbg0KDQo0LjYuMTENClsqXSAu
TkVUOiBBZGRlZCBzdXBwb3J0IG9mIGZvbGRlcnMgd2l0aCBuZXN0aW5nIGxldmVsIG1vcmUg
dGhhbiAyLg0KDQo0LjYuMTANClsqXSAuTkVUOiBGaXhlZCBidWcgd2l0aCBjYWxjdWxhdGlu
ZyAidHJpYWwgZGF5cyBsZWZ0IiBmb3IgcGVybWFuZW50IGtleXMuDQpbKl0gLk5FVDogIkFs
bG93IFVzZXJzIE1hbmFnZSBYTWFpbCBBY2NvdW50cyIgc2V0dGluZyBpcyBpZ25vcmVkIGlu
IGNhc2Ugb2YgY3JlYXRpbmcgYWNjb3VudHMgYW5kIGRvbWFpbnMgdGhyb3VnaCBJbnRlZ3Jh
dGlvbiBBUEkuDQpbKl0gLk5FVDogVGhlIGZvbGxvd2luZyBETExzIHNpZ25lZDogQ2hlY2tL
ZXkuZGxsLCBMaXRKc29uLmRsbCwgV2ViTWFpbFByby5kbGwNClsqXSAuTkVUOiBMaXRKc29u
LmRsbCB1cGRhdGVkLiBDb21waWxlZCBmcm9tIG9yaWdpbmFsIHNvdXJjZXMuDQoNCjQuNi45
DQpbKl0gLk5FVDogIk9iamVjdCByZWZlcmVuY2Ugbm90IHNldCB0byBhbiBpbnN0YW5jZSBv
ZiBhbiBvYmplY3QiIGJ1ZyBvbiBhdXRvbWF0aWMgY3JlYXRpbmcgYWNjb3VudCBvbiBsb2dp
biBpcyBmaXhlZC4NCg0KNC42LjgNClsqXSAuTkVUOiBJbXByb3ZlbWVudCBmb3IgY29tcGF0
aWJpbGl0eSB3aXRoIEhpLVRydXN0IG1vZGUgKGZpeGVkIHNhdmluZyBsb2dzKS4NClsqXSAu
TkVUOiBGaXhlZCBhIGJ1ZyBpbiBsaWNlbnNpbmcgc3lzdGVtLg0KWypdIC5ORVQ6IEludGVn
cmF0aW9uIEFQSSBpbXByb3ZlZC4NCg0KNC42LjcNClsqXSAuTkVUIEFkbWluUGFuZWw6IEFk
ZGVkICBTdG9yZSBtYWlsIGluIHRoZSBVc2VyJ3MgU2VydmVyIE1haWxib3ggc2V0dGluZyBv
biBtYW5hZ2luZyBmb3J3YXJkaW5nIHJ1bGVzIHNjcmVlbiBmb3IgWE1haWwgdXNlcnMgaW4g
QWRtaW4gUGFuZWwuDQpbKl0gLk5FVCBBZG1pblBhbmVsOiBGb3J3YXJkcyB3ZXJlIG5vdCBz
YXZlZCBvbiBjcmVhdGluZyBGb3J3YXJkZWQgRG9tYWluLiBGaXhlZC4NClsqXSAuTkVUOiBP
biBzZW5kaW5nIGEgbWVzc2FnZSBpbiBuYXRpdmUgbW9kZSwgdGhlIG1lc3NhZ2UgaXMgY3Jl
YXRlZCBpbiB0ZW1wb3JhcnkgZm9sZGVyIGZpcnN0IGFuZCB0aGVuIGlzIG1vdmVkIHRvICJs
b2NhbCIgZm9sZGVyLg0KWypdIC5ORVQ6ICJDYXN0IGlzIG5vdCB2YWxpZCIgaXMgZml4ZWQg
Zm9yIE1TIEFjY2VzcyBkYXRhYmFzZS4NClsqXSAuTkVUIEFkbWluUGFuZWw6IFVwZGF0ZSBy
b3V0aW5lIGlzIGZpeGVkIGZvciBNUyBBY2Nlc3MgZGF0YWJhc2UuDQpbKl0gLk5FVDogTGlj
ZW5zZSBrZXkgcHJvY2Vzc2luZyBjbGFzcyBmaXhlZCBhIGJpdC4NCg0KNC42LjYNClsqXSBQ
SFA6IEFkZGVkICBTdG9yZSBtYWlsIGluIHRoZSBVc2VyJ3MgU2VydmVyIE1haWxib3ggc2V0
dGluZyBvbiBtYW5hZ2luZyBmb3J3YXJkaW5nIHJ1bGVzIHNjcmVlbiBmb3IgWE1haWwgdXNl
cnMgaW4gQWRtaW4gUGFuZWwuDQpbKl0gUEhQOiBBIGJ1ZyB3aXRoIHNlYXJjaCBpbiBEaXJl
Y3QgTW9kZSBmaXhlZC4gQWRkaXRpb25hbCBzZWFyY2ggcXVlcnkgd2l0aG91dCBjaGFyc2V0
IGRlZmluaXRpb24gYWRkZWQuDQpbKl0gUEhQOiBBIGJ1ZyBpbiBBZG1pbiBQYW5lbCBmaXhl
ZC4gRGlyZWN0IG1vZGUgaXMgZGVmYXVsdCBzZXR0aW5nIHdhcyBub3Qgc2F2ZWQgYW5kIEFs
bG93IHVzZXJzIHRvIGNoYW5nZSBhY2NvdW50cyB3aGljaCBjYW4gYmUgdXNlZCB0byBsb2cg
aW4gc2V0dGluZyB3YXMgbm90IGRpc2FibGVkIHByb3Blcmx5Lg0KDQo0LjYuNQ0KWypdIFBI
UDogUmVzaXppbmcgdXNlcnMvZG9tYWlucyBsaXN0IGluIEFkbWluIFBhbmVsIGlzIGZpeGVk
Lg0KWypdIEpTIENhbGVuZGFyOiBBdXRvY2hhbmdpbmcgdGltZSBpcyBhZGRlZCB0byBFZGl0
IEV2ZW50IGZvcm0uIEZvciBleGFtcGxlLCBpZiBkYXRlIGlzIHRpbGwgPSAyNDowMCAyNC4w
Ni4wOSBvciAxMu+/ve+/vSAyNC4wNi4wOSwgaXQncyBhdXRvbWF0aWNhbGx5IGNoYW5nZWQg
dG8gMDA6MDAgMjUuMDYuMDkgb3IgMTJBTSAyNS4wNi4wOS4NClsqXSBKUyBDYWxlbmRhcjog
RXZlbnQgbGVuZ3RoIChpbiB0aGUgdG9wIHNlY3Rpb24gb2YgRGF5IGFuZCBXZWVrIHZpZXdz
KSB3YXMgZ3JlYXRlciBieSAxIHRoYW4gcmVhbCBsZW5ndGguIEZpeGVkLg0KWypdIEpTIENh
bGVuZGFyLCAuTkVUOiBEZXNjcmlwdGlvbiBmaWVsZCB3YXMgZmlsbGVkIHdpdGggbnVsbCB1
bmRlciBzb21lIGNpcmN1bXN0YW5jZXMuIEZpeGVkLg0KWypdIEpTIENhbGVuZGFyOiBKUy1l
cnJvciBvbiBjcmVhdGluZyBldmVudCBmaXhlZC4gT2NjdXJlZCB1bmRlciBzb21lIHNwZWNp
ZmljIGNpcmN1bXN0YW5jZXMuDQpbKl0gUEhQOiBQYXRocyB0byBub24tZXhpc3RpbmcgZmls
ZXMgYXJlIGZpeGVkIChpY29ucy5pY28gYW5kIHNvbWUgaW1hZ2VzIG9mIEFmdGVyTG9naWNf
RGFyayBza2luKQ0KWypdIEpTLCBQSFAsIC5ORVQ6IFNldHRpbmcgZm9jdXMgdG8gdGhlIGZp
cnN0IGZpZWxkIGFkZGVkIHRvIGxvZ2luIHBhZ2VzIG9mIFdlYk1haWwgYW5kIEFkbWluUGFu
ZWwuDQoNCjQuNi40DQpbKl0gUEhQOiBGaXggZm9yIGJ1ZyB3aXRoIGRvdWJsZSBnemlwcGlu
ZyBpbiBjYXNlIHdoZW4gemxpYi5vdXRwdXRfY29tcHJlc3Npb24gZW5hYmxlZCBpbiBwaHAu
aW5pLg0KWytdIFBIUDogVXBkYXRlU29ja2V0VGltZW91dHMgY3VzdG9tIG1ldGhvZCBhZGRl
ZC4NCg0KNC42LjMNClsqXSBKUzogRml4IGZvciBidWcgd2hpY2ggcHJldmVudGVkIGxvZ2dp
bmcgaW50byBXZWJNYWlsIHdpdGggZGlzYWJsZWQgQWR2YW5jZWQgTG9naW4uDQpbKl0gLk5F
VDogRml4ZWQgYnVnIHdpdGggZmxhZ3MgZmllbGQgaW4gYXdtX21lc3NhZ2VzIHRhYmxlLg0K
WypdIC5ORVQ6IExhbmd1YWdlIHNlbGVjdGlvbiBsaXN0IHdhcyBub3QgaGlkZGVuIHdoZW4g
ZGlzYWJsZWQgaW4gc2V0dGluZ3MuIEZpeGVkLg0KWypdIC5ORVQ6IERhdGFiYXNlIHVwZGF0
ZSBzY3JpcHQgZml4ZWQuDQpbKl0gLk5FVDogQWNjZXNzIGRhdGFiYXNlIHVwZGF0ZWQuDQpb
Kl0gLk5FVDogTWFpbEJlZS5ORVQuZGxsIHVwZGF0ZWQuDQoNCjQuNi4xDQpbKl0gLk5ldDog
TG9nIGxvY2F0aW9uIGVycm9yIGZpeGVkLg0KDQo0LjYuMA0KWypdIEpTOiBEZWxldGluZyBt
ZXNzYWdlIGluIEZ1bGwgVmlldyBjYXVzZXMgbW92aW5nIHRvIG5leHQgbWVzc2FnZS4NClsq
XSBQSFA6IE9uIGZ1bGwgc2VhcmNoLCBtb3ZpbmcgdG8gMm5kIHBhZ2Ugd29ya2VkIGluY29y
cmVjdGx5IGluIEFKQVggdmVyc2lvbi4gRml4ZWQuDQpbK10gSlM6IEJsb2NraW5nIHNvbWUg
YnV0dG9ucyBvbiBwcmVzc2luZyAoQ2hlY2sgTWFpbCwgU2VuZCwgU2F2ZSkuDQpbK10gLk5l
dCwgUEhQLCBKUzogTmV3IGFwcHJvYWNoIG9mIGNob29zaW5nIGludGVyZmFjZSBsYW5ndWFn
ZS4NClsrXSBQSFA6IEVuYWJsZWQgY29tcHJlc3NpbmcgYW5kIG1lcmdpbmcgSlMgZmlsZXMu
IENvbXByZXNzaW5nIGFsbCBBSkFYIGRhdGEgYW5kIGluZGV4LnBocCBmaWxlLg0KWytdIFBI
UCwgLk5ldDogVWtyYWluaWFuIGxhbmd1YWdlIGFkZGVkLg0K


----=_NextPart_07a5053abf2d997fcd4c031b9788dc05--




