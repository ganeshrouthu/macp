<?php

/**
 * Implements hook_menu().
 */
function pm_trash_menu() {
  $items['messages/trash'] = array(
    'title'            => 'Trash',
    'page callback'    => 'privatemsg_trash_page',
    'page arguments'   => array('trash'),
    'access callback'  => 'privatemsg_user_access',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => -12,
    'menu_name'        => 'user-menu',
  );
  return $items;
}

function privatemsg_trash_page($argument = 'trash', $uid = NULL) {
  global $user;

  // Setting default behavior...
  $account = $user;
  // Because uid is submitted by the menu system, it's a string not a integer.
  if ((int)$uid > 0 && $uid != $user->uid) {
    // Trying to view someone else's messages...
    if (!$account_check = user_load($uid)) {
      return MENU_NOT_FOUND;
    }
    if (!privatemsg_user_access('read all private messages')) {
      return MENU_ACCESS_DENIED;
    }
    // Has rights and user_load return an array so user does exist
    $account = $account_check;
  }

  return drupal_get_form('privatemsg_trash', $argument, $account);
}

function privatemsg_trash($form, &$form_state, $argument, $account) {
  drupal_add_css(drupal_get_path('module', 'privatemsg') . '/styles/privatemsg-list.css');
  module_load_include('inc', 'privatemsg', 'privatemsg.pages');

  // If this is an AJAX request, update $_GET['q'] so that table sorting and
  // similar links are using the correct base path.
  if ($_GET['q'] == 'system/ajax') {
    $q = 'messages';
    if (!empty($argument)) {
      $q .= '/' . $argument;
    }
    $_GET['q'] = $q;
  }

  // Load the table columns.
  $columns = array_merge(array('subject', 'last_updated'), array_filter(variable_get('privatemsg_display_fields', array('participants'))));

  // Load the themed list headers based on the available data.
  $headers = _privatemsg_list_headers($columns);

  $form = array(
    '#list_argument' => $argument,
    '#submit' => array('privatemsg_trash_submit'),
    'updated' => array(
      '#prefix' => '<div id="privatemsg-list-form">',
      '#suffix' => '</div>',
    ),
  );
  $form['updated']['list'] = array(
    '#type' => 'tableselect',
    '#header' => $headers,
    '#options' => array(),
    '#attributes' => array('class' => array('privatemsg-list')),
    '#empty' => t('No messages available.'),
    '#weight' => 5,
    '#pre_render' => array('_privatemsg_list_thread'),
  );

  $query = privatemsg_list_trash_query($account, $argument);
  $i = 0;
  $rec = $query->execute();
  //dsm($rec, 'rec');
  foreach ($rec as $row) {
    // Store the raw row data.
    $form['updated']['list']['#options'][$row->thread_id] = (array)$row;
    // Tableselect sorts the options, set a weight so that the order doesn't get
    // changed.
    $form['updated']['list']['#options'][$row->thread_id]['#weight'] = $i++;
  }

  if (!empty($form['updated']['list']['#options'])) {
    $form['updated']['actions'] = _privatemsg_trash_action_form($argument);
  }

  // Save the currently active account, used for actions.
  $form['account'] = array('#type' => 'value', '#value' => $account);

  // Define checkboxes, pager and theme
  $form['updated']['pager'] = array('#markup' => theme('pager'), '#weight' => 20);

  return $form;
}

function privatemsg_list_trash_query($account, $argument = 'list') {
  $query = db_select('pm_message', 'pm')->extend('TableSort')->extend('PagerDefault');
  $query->join('pm_index', 'pmi', 'pm.mid = pmi.mid');

  // Create count query;
  $count_query = db_select('pm_message', 'pm');
  $count_query->addExpression('COUNT(DISTINCT pmi.thread_id)', 'count');
  $count_query->join('pm_index', 'pmi', 'pm.mid = pmi.mid');
  $count_query
    ->condition('pmi.recipient', $account->uid)
    ->condition('pmi.type', array('hidden', 'user'))
    ->condition('pmi.deleted', 0, '>');
  $query->setCountQuery($count_query);


  // Required columns
  $query->addField('pmi', 'thread_id');
  $query->addExpression('MIN(pm.subject)', 'subject');
  $query->addExpression('MAX(pm.timestamp)', 'last_updated');
  $query->addExpression('MAX(pm.has_tokens)', 'has_tokens');
  $query->addExpression('SUM(pmi.is_new)', 'is_new');

  // Load enabled columns
  $fields = array_filter(variable_get('privatemsg_display_fields', array('participants')));

  if (in_array('count', $fields)) {
    // We only want the distinct number of messages in this thread.
    $query->addExpression('COUNT(distinct pmi.mid)', 'count');
  }
  if (in_array('participants', $fields)) {
    // Query for a string with uids, for example "1,6,7". This needs a subquery on PostgreSQL.
    if (db_driver() == 'pgsql') {
      $query->addExpression("array_to_string(array(SELECT DISTINCT pmia.type || '_' || pmia.recipient
                                                          FROM {pm_index} pmia
                                                          WHERE pmia.type <> 'hidden' AND pmia.thread_id = pmi.thread_id AND pmia.recipient <> :current), ',')", 'participants', array(':current' => $account->uid));
    }
    else {
      $query->addExpression("(SELECT GROUP_CONCAT(DISTINCT CONCAT(pmia.type, '_', pmia.recipient))
                                     FROM {pm_index} pmia
                                     WHERE pmia.type <> 'hidden' AND pmia.thread_id = pmi.thread_id AND pmia.recipient <> :current)", 'participants', array(':current' => $account->uid));
    }
  }
  if (in_array('thread_started', $fields)) {
    $query->addExpression('MIN(pm.timestamp)', 'thread_started');
  }
  return $query
    ->condition('pmi.recipient', $account->uid)
    ->condition('pmi.type', array('hidden', 'user'))
    ->condition('pmi.deleted', 0, '>')
    ->groupBy('pmi.thread_id')
    ->orderByHeader(_privatemsg_list_headers(array_merge(array('subject', 'last_updated'), $fields)))
    ->limit(variable_get('privatemsg_per_page', 25));
}

function _privatemsg_trash_action_form($type) {
  $form = array(
      '#prefix'      => '<div class="container-inline">',
      '#suffix'      => '</div>',
      '#weight'      => -5,
  );

  $options = array('choose' => t('Actions...'), 'delete' => t('Delete Permanently'), 'move' => t('Move to Inbox'));

    $form['operation'] = array(
      '#type'          => 'select',
      '#options'       => $options,
    );
    $form['submit'] = array(
      '#type'       => 'submit',
      '#value'      => t('Update'),
      '#attributes' => array('class' => array('form-item')),
    );
  return $form;
}

function privatemsg_trash_submit($form, &$form_state) {
 global $user;
  $submit = TRUE;
  $selected = array_filter($form_state['values']['list']);
  if(empty($selected)) {
    $submit = FALSE;
    drupal_set_message('Please Select Message', 'warning');
  }
  if($form_state['values']['operation'] == 'choose') {
    $submit = FALSE;
    drupal_set_message('Please Select Operation', 'warning');
  }
  if($submit) {
    if($form_state['values']['operation'] == 'delete'){
      $res = db_delete('pm_index')
      ->condition('thread_id', $selected)
      ->condition('recipient', $user->uid)
      ->execute();
    }
    if($form_state['values']['operation'] == 'move'){
      db_update('pm_index')
      ->fields(array('deleted' => 0))
      ->condition('thread_id', $selected)
      ->condition('recipient', $form_state['values']['account']->uid)
      ->execute();
    }
  }
}