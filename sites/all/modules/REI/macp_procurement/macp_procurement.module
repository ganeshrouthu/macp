<?php
/**
 * Implementing hook_init for create folder for
 * store file of procurment module
 */
function macp_procurement_init() {
  // Since this file should only be loaded on the front page, it cannot be
  // declared in the info file.
  $module_name = _get_module_name(__DIR__);
  $curr_dir = _get_module_path(__DIR__);
  drupal_add_js($curr_dir . 'jquery.validate.js');
  drupal_add_js($curr_dir .'procurement.js');
  drupal_add_css($curr_dir . 'css/procurement.css', array('group' => CSS_DEFAULT));
}

/**
 * Get Tender Groups
 */

function _tender_groups() {
	$groups = variable_get('tender_groups');
	if (empty($groups)) {
		$tender_groups = array();
		$tender_groups[1] = 'Goods/Equipements';
		$tender_groups[2] = 'Civil Works';
		$tender_groups[3] = 'Consultants/Service Providers';
		$tender_groups[4] = 'Recruitments';
		$tender_groups[5] = 'Non-Consultancy Service Providers';
		variable_set('tender_groups', $tender_groups);
	}
	$groups = variable_get('tender_groups');
	return $groups;
}

/**
 * Implementing hook_perm
 */
function macp_procurement_permission() {
  return array(
    'content admin procurement' => array(
      'title' => t('content admin access'), 
      'description' => t('accees for content admin.'),
    ),
  );
}

/**
 * Implementing hook_menu
 */
function macp_procurement_menu(){
  $items = array();
	$items['procurement/tenders'] = array(
    'title' => t('Tender List'),
    'description' => 'Display tender list for admin',
    'page callback'    => 'procurement_user_tender_list',
    'access callback' => TRUE,
    'file' => 'procurement_tender_listing.inc',
  );
  $items['tender/download/user'] = array(
    'title' => t('Tender download by users'),
    'description' => 'Display users',
    'page callback'    => 'tender_download_user',
    'access callback' => 'check_user_role',
    'file' => 'procurement_addendum_listing.inc',
  );
  $items['procurement/add/tender'] = array(
    'title' => 'Add New Tender',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('procurement_add_tender'),
    'access callback' => 'check_user_role',
    'file' => 'procurement_tender_listing.inc',
  );
  $items['procurement/manage-tenders'] = array(
    'title' => t('Manage Tenders'),
    'description' => 'Display tender list for admin',
    'page callback'    => 'procurement_tender_list',
    'access callback' => 'check_user_role',
    'file' => 'procurement_tender_listing.inc',
  );
  $items['tender/%tender/delete'] = array(
    'page callback'    => array('procurement_tender_delete'),
    'page arguments' => array(1),
    'access callback' => 'check_user_role',
    'file' => 'procurement_tender_listing.inc',
  );
  $items['procurement/%tender/edit'] = array(
    'title' => 'Edit Tender',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('procurement_add_tender', 1),
    'access callback' => 'check_user_role',
    'file' => 'procurement_tender_listing.inc',
  );

	$items['procurement/view-tender'] = array(
    'title' => 'View Tender Details',
    'page callback' => 'procurement_view_tender_details',
    'access callback' => TRUE,
    'file' => 'procurement_tender_listing.inc',
  );
  $items['procurement/%tender/add/addendum'] = array(
    'title' => 'Add New Addendum',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('procurement_add_addendum', 1),
    'access callback' => 'check_user_role',
    'file' => 'procurement_addendum_listing.inc',
  );
  $items['procurement/%tender/%addendum/addendum/edit'] = array(
    'title' => 'Edit addendum',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('procurement_add_addendum', 1, 2),
    'access callback' => 'check_user_role',
    'file' => 'procurement_addendum_listing.inc',
  );

  $items['addendum/%tender/%addendum/details'] = array(
    //'title' => t('Addendum'),
    'description' => 'Display tender list for admin',
    'page callback'    => array('addendum_detail'),
    'page arguments' => array(1,2),
    'access callback' => TRUE,
    'file' => 'procurement_addendum_listing.inc',
  );

  $items['procurement/%tender/%addendum/details'] = array(
    //'title' => t('Addendum'),
    'description' => 'Display tender list for admin',
    'page callback'    => array('addendum_detail'),
    'page arguments' => array(1,2),
    'access callback' => TRUE,
    'file' => 'procurement_addendum_listing.inc',
  );

  $items['download/tender/%/%'] = array(
    'title' => 'Download Tender',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_login_download_tender', 2,3),
    'access callback' => 'check_user_role',
    'access callback' => TRUE,
    'file' => 'procurement_tender_listing.inc',
  );
  $items['register/download/tender/%'] = array(
    'title' => 'Registration form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_register_download_tender', 3),
    'access callback' => 'check_user_role',
    'access callback' => TRUE,
    'file' => 'procurement_tender_listing.inc',
  );

  $items['procurement/download/tender/%'] = array(
    'title' => 'Registration form',
    'page callback' => 'procurement_download_tender_files',
    'page arguments' => array(3),
    'access callback' => 'check_user_role',
    'access callback' => TRUE,
    'file' => 'procurement_tender_listing.inc',
  );

  $items['procurement/tender/downloaded_user/%/%'] = array(
    'title' => 'Users who downloaded This Tender',
    'page callback' => 'procurement_tender_downloaded_users',
    'page arguments' => array(3, 4),
    'access callback' => 'check_user_role',
    'access callback' => TRUE,
    'file' => 'procurement_tender_listing.inc',
  );

  $items['tuser/change_password'] = array(
    'title' => 'Forgot Password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tuser_chnage_password'),
    //'access callback' => 'check_user_role',
    'access callback' => TRUE,
    'file' => 'procurement_tender_listing.inc',
  );
  $items['change_password/%change_password_record'] = array(
    'title' => 'Change Password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_password', 1),
    'access callback' => 'check_user_role',
    'file' => 'procurement_tender_listing.inc',
  );
  $items['procurement/archives/%archives/edit'] = array(
    'page callback'    => 'procurement_archives_edit_list',
    'page arguments' => array(2),
    'access callback' => 'check_user_role',
    'file' => 'procurement_tender_listing.inc',
  );
  $items['procurement/addendum/%/delete'] = array(
    //'title' => t('Addendum'),
    'description' => 'Delete Addendum',
    'page callback'    => array('delete_addendum'),
    'page arguments' => array(2),
    'access callback' => 'check_user_role',
    'file' => 'procurement_addendum_listing.inc',
  );

  $items['procurement/tender_user/logout'] = array(
    //'title' => t('Addendum'),
    'description' => 'Delete Addendum',
    'page callback'    => array('procurement_user_logout'),
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'procurement_tender_listing.inc',
  );
  return $items;
}

function check_user_role() {
	global $user;
	return (in_array('content admin', $user->roles) || $user->uid == 1);
}

/**
 * implements hook_theme()
 */
function macp_procurement_theme($existing, $type, $theme, $path) {
  return array(
    'tender-view' => array(
      'template' => 'templates/tender-view',
      'variables' => array('records' => array(), 'headings' => array()),
    ),
		'addendum-view' => array(
      'template' => 'templates/addendum-view',
      'variables' => array(
											'records' => array(),
											'tender' => array(),
											'file' => array(),
											'headings' => array()),
    ),
  );
}

function tender_load($tid) {
	return db_select('tender', 't')
	  ->fields('t')
	  ->condition('t.tid', $tid, '=')
	  ->execute()
	  ->fetchObject();  
}

/*
 * for fetching record of perticuler addendum ID
 */
function addendum_load($aid) {
	return db_select('addendum', 'a')
	  ->fields('a')
	  ->condition('a.aid', $aid, '=')
	  ->execute()
	  ->fetchObject();  
} 

function get_addendum_by_tid($tid = FALSE) {
  global $base_url;
  $download_link = $base_url . '/procurement/download/tender/';
	$output = '';
  if (!$tid) {
    return $output;
  }
	global $base_path;
	$result = db_select('addendum', 'a')
	  ->fields('a', array('tid', 'aid', 'atitle', 'afid'))
	  ->condition('a.tid', $tid, '=')
	  ->execute();
	
  $output = '<ul>';
	foreach($result as $addendum) {
		$output .= '<li>';
    $output .=' <a href =' . $download_link . $addendum->afid .'>'.$addendum->atitle.'</a>';
    $output .=' <a href =' . $base_path . 'procurement/' .$tid . '/' . $addendum->aid .'/addendum/edit>Edit</a>';
    $output .='</li>';
    $output .=' <a href =' . $base_path . 'procurement/addendum/' . $addendum->aid .'/delete class="confirm-delete">Delete</a></li>';
	}
	$output .= '</ul>';
	return $output;	  
}

function get_addendum_for_tenders($tid = FALSE) {
	global $base_path, $base_url;
	$ecn_curr_path = str_replace('/', '--', current_path());
  $download_link = $base_url . '/procurement/download/tender/';
	$output = '';
  if (!$tid) {
    return $output;
  }
	$result = db_select('addendum', 'a')
	  ->fields('a', array('tid', 'aid', 'atitle', 'afid'))
	  ->condition('a.tid', $tid, '=')
	  ->execute();
	$lis = '';
	if (!empty($result)) {
		foreach($result as $addendum) {
			$lis .= '<li>';
			$lis .= '<a href =' . $base_url . '/procurement/' .$tid . '/' . $addendum->aid . '/details>' . $addendum->atitle . '</a>';
			if (_is_content_admin_logged_in() && arg(0) == 'procurement' && arg(1) == 'manage-tenders') {
				$edit_link = $base_url.'/procurement/'.$tid.'/'.$addendum->aid.'/addendum/edit/'.$ecn_curr_path;
				$lis .=' <a href =' . $edit_link . '>Edit</a>';
				$lis .=' | <a href =' . $base_url . '/procurement/addendum/' . $addendum->aid .'/delete class="confirm-delete">Delete</a>';
				$lis .= '</li>';
			}
		}
	}
	$out = (strlen($lis)) ? '<ul class="tender-addendums">'.$lis.'</ul>' : '';
	return $out;
} 

function get_tender_files($tid) {
	global $base_path, $base_url;
  $download_link = $base_url . '/procurement/download/tender/';
	$result = db_select('addendum', 'a')
	  ->fields('a', array('tid', 'aid', 'afid', 'atitle'))
	  ->condition('a.tid', $tid, '=')
	  ->execute();
	$tender = tender_load($tid);
	$file = file_load($tender->tfid);
	$output = '';
  $output .= '<ul class="tender-addendums" style="padding:0;margin:0;">';
  if(!empty($file)) {
		$tender_file = 'Tender-' . $file->filename;
  	$output .= '<li><a href="' . $download_link . $file->fid . '">' . $tender_file . '</a></li>';
  }
	$cntr = 0;
  if (!empty($result)) {
		$i = 0;
		foreach($result as $addendum) {
			++$i;
			$file = file_load($addendum->afid);
			if(!empty($file)) {
				++$cntr;
				$output .= '<li><a href =' . $base_path . 'download/tender/' . $tender->tid . '/' . $addendum->afid . '>' . 'Addendum-'.$file->filename . '</a></li>';
			}
		}
	}	
	$output .= '</ul>';
	return $output;	  
}

function get_user_addendum_file_tid($tid) {
	global $base_path;
	$result = db_select('addendum', 'a')
	  ->fields('a', array('tid', 'aid', 'afid', 'atitle'))
	  ->condition('a.tid', $tid, '=')
	  ->execute();
	
	$tender = tender_load($tid);
	$file = file_load($tender->tfid);
	$output = '';
  $output .= '<ul>';
  $output .= '<li><a href =' . $base_path . 'download/tender/' . $tender->tid . '/' . $tender->tfid . '>' . $file->filename . '</a></li>';

	$cntr = 0;
  if (!empty($result)) {
		$i = 0;
		foreach($result as $addendum) {
			++$i;
			$file = file_load($addendum->afid);
			if(!empty($file)) {
				++$cntr;
				$output .= '<li><a href =' . $base_path . 'download/tender/' . $tender->tid . '/' . $addendum->afid . '>' . 'Addendum-'.$file->filename . '</a></li>';
			}
		}
	}
	
	if ($cntr < 1) {
//		$output .= '<li>No addendum data available.</li>';
	}
	$output .= '</ul>';
	return $output;	  
}


function get_user_addendum_by_tid($tid) {
	global $base_url;
	$result = db_select('addendum', 'a')
	  ->fields('a', array('tid', 'aid', 'atitle'))
	  ->condition('a.tid', $tid, '=')
	  ->execute();
  $output = '<ul>';
	if (!empty($result)) {
		foreach($result as $addendum) {
			$output .= '<li><a href =' . $base_url . 'addendum/' .$tid . '/' . $addendum->aid . '/details>' . $addendum->atitle . '</a></li>';
		}
	}
	else {
		$output .= '<li>No data available.</li>';
	}
	$output .= '</ul>';
	return $output;	  
} 

function change_password_record_load($key){ 
  $pkey = unserialize(base64_decode($key));
  $record = array();
  $record['email'] = $pkey[0]; 
  return $record;
}
//Added by santhosh on 01Feb2013 for archives
function archives_load($key){ 
  $pkey = unserialize(base64_decode($key));
  $record = array();
  $record['month'] = $pkey[0];
  $record['created'] = $pkey[1];
  //$record['created'] = date("d M Y", $record['created']);
  return $record;
}
function macp_procurement_block_info() {
  $blocks = array();
  if (check_user_role()) {
    $blocks['archives'] = array(
      'info' => t('Tenders Archive'),
      // DRUPAL_CACHE_PER_ROLE will be assumed.
    );
  }
	$blocks['mis_reports'] = array(
		'info' => t('MIS Reports'),
		// DRUPAL_CACHE_PER_ROLE will be assumed.
	);
	$blocks['procurement_links'] = array(
    'info' => t('Procurement Module Specific Links'),
  );
  return $blocks;
}

function macp_procurement_block_view($delta = ''){ 
  $block = array();
	switch ($delta) {
    case 'archives':
      if (check_user_role()) {
        $block['subject'] = 'Tenders Archive';
        $block['content'] = _get_archives_records();
      }
    break;
		
		case 'mis_reports':
      if (check_user_role()) {
        $block['subject'] = 'MIS Reports';
        $block['content'] = _get_mis_reports_links();
      }
    break;
		case 'procurement_links':
      $block['subject'] = '';
      $block['content'] = _place_tender_misc_link();
		break;
  }
  return $block;
}

function _get_mis_reports_links() {
	global $base_url;
	$links = array();
	$links[] = '<a href="'.$base_url.'/finance-reports">MIS Reports</a>';
	$html = implode('<br/>', $links);
	return $html;
}

function _get_archives_records() {
  $html = '';
  $current_date = DATE('m/d/Y');
  $current_timestamp = strtotime($current_date);
  $sql = "SELECT FROM_UNIXTIME( t.created  , '%M %Y' ) 
                        AS 'Month', COUNT( * ) AS Count, 
                        created FROM tender AS t 
                        WHERE t.created < {$current_timestamp} 
                        GROUP BY Month";
  $result = db_query($sql);
  foreach($result as $tender) {
    $variables = array($tender->Month, $tender->created);
    $argument = base64_encode(serialize($variables));
    $path = 'procurement/archives/'.$argument.'/edit';
    $html .= l($tender->Month.' ('.$tender->Count.')', $path)."</br>";
  }
  return $html;
}

function _place_tender_misc_link() {
  @session_start();
	$curr_path = current_path();
	$ecn_curr_path = str_replace('/', '--', current_path());
  $arr_html = array();
	$tenders_flag = (strpos($curr_path, 'procurement/tenders') !== false) ? FALSE:TRUE;
	if ($tenders_flag) {
		$arr_html[] = l(t('Tenders'),  'procurement/tenders');
	}
  if (_is_content_admin_logged_in()) {
		$manage_tenders_flag = (strpos($curr_path, 'procurement/manage-tenders') !== false) ? FALSE:TRUE;
		if ($manage_tenders_flag) {
			$arr_html[] = l(t('Manage Tenders'), 'procurement/manage-tenders');
		}
		$add_tender_flag = (strpos($curr_path, 'procurement/add/tender') !== false) ? FALSE:TRUE;
    if ($add_tender_flag) {
			//$arr_html[] = l(t('Add Tender'),  'procurement/add/tender/0/'.$ecn_curr_path);
			$arr_html[] = l(t('Add Tender'),  'procurement/add/tender');
		}
  }
  if (isset($_SESSION['tender_user']) || FALSE != variable_get(session_id(), FALSE)) {
    $arr_html[] = l(t('Logout'),  'procurement/tender_user/logout');
  }
  $html = '<div class="proc-links">' . implode(' | ', $arr_html) .'</div>';
  return $html;
}

/*
 * Function to check whether Content Admin
 * User is logged in.
 */
function _is_content_admin_logged_in() {
  $flag = FALSE;
  global $user;
  if(in_array('content admin', $user->roles) || $user->uid == 1) {
    $flag = TRUE;
  }
  return $flag;
}

function _prepare_cancel_url($default_value) {
	global $base_url;
	$destination = (arg(4)) ? arg(4) : 'procurement/manage-tenders';
	$destination = (arg(4)) ? arg(4) : $default_value;
	$destination = str_replace('--', '/', $destination);
	$cancel_url = $base_url . '/' . $destination;
	return $cancel_url;
}

/*
 * Redirect the user to Front Page(Site Home Page) 
 * after he logs in.
 */
function macp_procurement_form_user_login_alter(&$form, &$form_state, $form_id) {
	$form['#submit'][] = '_user_login_form_submit';
}

function _user_login_form_submit($form, &$form_state) {
	$form_state['redirect'] = '<front>';
}