<?php
/**
 * Implementing hook_menu
 */
function listing_menu(){
  $items = array();
 
  $items['listing/success-story'] = array(
    'title' => 'Success Stories',
    'description' => 'display the list of success stories.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('listing_success_story'),
    'access arguments' => array('access content'),
    //'file' => 'node_list.content.inc',
    //'type' => MENU_LOCAL_TASK,
  );
  
    
  $items['node_list/hello_world'] = array(
        'title' => 'Hello World Test',
        'page callback' => 'say_hello_world',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
     );
  
  return $items;
}

function say_hello_world() {
    $vars = array();
    $vars['type']="ul";
    $vars['title'] = "";
    $vars['attributes']=array("");
    $vars['items'][0]="This is a simple proof of concept module";

    return theme_item_list($vars);
}

/**
 * Display the list of all success-stories content type
 */
function listing_success_story() {
  global $user;
  $header = array(
    'title' => array('data' => t('Title'), 'field' => 'n.title'),
    'operations' => array('data' => t('Operations')),
  );
  
 
  $nids = db_select('node', 'n')
    ->fields('n',array('nid'))
    ->condition('type', 'success_story','=')
    ->condition('uid', $user->uid, '=')
    ->addTag('node_access')
    ->execute()
    ->fetchCol();
  //dsm($nids, 'nid');
  $nodes = node_load_multiple($nids);
  
  $destination = drupal_get_destination();
  $options = array();
  foreach($nodes as $node){
    $options[$node->nid] = array(
        'title' => array(
        'data' => array(
          '#type' => 'link',
          '#title' => $node->title,
          '#href' => 'node/' . $node->nid,
        ),
      ),
      'operations' => array('data' => array('#type' => 'link', '#title' => t('edit'), '#href' => "node/$node->uid/edit", '#options' => array('query' => $destination))),
    );
  }
  
   
  $form['accounts'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No people available.'),
  );
  $form['pager'] = array('#markup' => theme('pager'));
  
  $form['options']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#validate' => array('listing_nodes_validate'),
    '#submit' => array('listing_nodes_submit'),
  );
  
  return $form;
  
  
}

/**
 * Validate node_admin_nodes form submissions.
 *
 * Check if any nodes have been selected to perform the chosen
 * 'Update option' on.
 */
function listing_nodes_validate($form, &$form_state) {
  // Error if there are no items to select.
  if (!is_array($form_state['values']['accounts']) || !count(array_filter($form_state['values']['accounts']))) {
    form_set_error('', t('No items selected.'));
  }
}



function listing_nodes_submit($form, &$form_state) {
  $form['nodes'] = array('#prefix' => '<ul>', '#suffix' => '</ul>', '#tree' => TRUE);
  foreach($form_state['values']['accounts'] as $nid){
    dsm($nid, 'nid');
    $title = db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $nid))->fetchField();
    $form['nodes'][$nid] = array(
      '#type' => 'hidden',
      '#value' => $nid,
      '#prefix' => '<li>',
      '#suffix' => check_plain($title) . "</li>\n",
    );
  }
  
  $form['operation'] = array('#type' => 'hidden', '#value' => 'delete');
  $form['#submit'][] = 'listing_multiple_delete_confirm';
  $confirm_question = format_plural(count($nodes),
                                  'Are you sure you want to delete this item?',
                                  'Are you sure you want to delete these items?');
  return confirm_form($form,
                    $confirm_question,
                    'admin/content', t('This action cannot be undone.'),
                    t('Delete'), t('Cancel'));
  
}


function listing_multiple_delete_confirm($form, &$form_state, $nodes) {
  $form['nodes'] = array('#prefix' => '<ul>', '#suffix' => '</ul>', '#tree' => TRUE);
  // array_filter returns only elements with TRUE values
  foreach ($nodes as $nid => $value) {
    $title = db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $nid))->fetchField();
    $form['nodes'][$nid] = array(
      '#type' => 'hidden',
      '#value' => $nid,
      '#prefix' => '<li>',
      '#suffix' => check_plain($title) . "</li>\n",
    );
  }
  $form['operation'] = array('#type' => 'hidden', '#value' => 'delete');
  $form['#submit'][] = 'node_multiple_delete_confirm_submit';
  $confirm_question = format_plural(count($nodes),
                                  'Are you sure you want to delete this item?',
                                  'Are you sure you want to delete these items?');
  return confirm_form($form,
                    $confirm_question,
                    'admin/content', t('This action cannot be undone.'),
                    t('Delete'), t('Cancel'));
}

function listing_multiple_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    node_delete_multiple(array_keys($form_state['values']['nodes']));
    $count = count($form_state['values']['nodes']);
    watchdog('content', 'Deleted @count posts.', array('@count' => $count));
    drupal_set_message(format_plural($count, 'Deleted 1 post.', 'Deleted @count posts.'));
  }
  $form_state['redirect'] = 'admin/content';
}